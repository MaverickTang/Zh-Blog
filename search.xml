<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>代码集</title>
    <url>/Blogs/2020/03/30/Codes/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>博主我隔离期间实在无聊于是无聊到整理代码模版</p>
<p>从入门到放弃</p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="输入类"><a href="#输入类" class="headerlink" title="输入类"></a>输入类</h3><p>读入优化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> c=getchar();</span><br><span class="line">	<span class="keyword">while</span>(c&gt;<span class="string">'9'</span>||c&lt;<span class="string">'0'</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;</span><br><span class="line">		c=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">		x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">		c=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3><p>高精度真的是mol鬼，到现在听到要打高精度觉得自己还是打不出来</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> len, s[mx];<span class="comment">//高精度长度和存放数值</span></span><br><span class="line">	bign() &#123; <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s)),len=<span class="number">1</span>;&#125; <span class="comment">//构造函数初始化</span></span><br><span class="line">	bign (<span class="keyword">int</span> num) &#123; *<span class="keyword">this</span> = num; &#125;<span class="comment">//低精度赋值</span></span><br><span class="line">	bign (<span class="keyword">const</span> <span class="keyword">char</span> *num) &#123; *<span class="keyword">this</span> = num; &#125; <span class="comment">//字符串赋值</span></span><br><span class="line">	bign <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="keyword">int</span> num) &#123;<span class="comment">//低精度转换成高精度</span></span><br><span class="line">		<span class="keyword">char</span> st[mx]; <span class="built_in">sprintf</span>(st,<span class="string">"%d"</span>,num);	<span class="keyword">return</span> *<span class="keyword">this</span>=st;</span><br><span class="line">	&#125;</span><br><span class="line">	bign <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="keyword">char</span> *num) &#123;<span class="comment">//将字符串转成高精度值</span></span><br><span class="line">		len=<span class="built_in">strlen</span>(num);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) s[i]=num[len-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123;<span class="comment">//清除高位 0</span></span><br><span class="line">		<span class="keyword">while</span>(len&gt;<span class="number">1</span> &amp;&amp; s[len<span class="number">-1</span>]==<span class="number">0</span>) len--;</span><br><span class="line">	&#125;</span><br><span class="line">	bign <span class="keyword">operator</span> + (<span class="keyword">const</span> bign &amp;b) &#123; <span class="comment">//重载运算符 +</span></span><br><span class="line">		<span class="keyword">int</span> l=<span class="built_in">max</span>(len,b.len),i;</span><br><span class="line">		bign c;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;l; i++) &#123;</span><br><span class="line">			c.s[i]+=(s[i]+b.s[i]);<span class="comment">//当前位</span></span><br><span class="line">			c.s[i+<span class="number">1</span>]+=c.s[i]/<span class="number">10</span>;<span class="comment">//进位位</span></span><br><span class="line">			c.s[i]%=<span class="number">10</span>;<span class="comment">//调整本位</span></span><br><span class="line">		&#125;</span><br><span class="line">		c.len=l+<span class="number">1</span>;</span><br><span class="line">		c.clean();</span><br><span class="line">		<span class="keyword">return</span> c;</span><br><span class="line">	&#125;</span><br><span class="line">	bign <span class="keyword">operator</span> - (<span class="keyword">const</span> bign &amp;x) &#123;<span class="comment">//重载运算符-</span></span><br><span class="line">		bign c=*<span class="keyword">this</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(x.s[i]&gt;c.s[i]) &#123;</span><br><span class="line">				c.s[i+<span class="number">1</span>]--;<span class="comment">//从前借一位</span></span><br><span class="line">				c.s[i]+=<span class="number">10</span>;<span class="comment">//当前位加10</span></span><br><span class="line">			&#125;</span><br><span class="line">			c.s[i]-=x.s[i];<span class="comment">//直接减</span></span><br><span class="line">		&#125;</span><br><span class="line">		c.clean();</span><br><span class="line">		<span class="keyword">return</span> c;</span><br><span class="line">	&#125;</span><br><span class="line">	bign <span class="keyword">operator</span> * (<span class="keyword">const</span> bign &amp;b) &#123;<span class="comment">//重载运算符*</span></span><br><span class="line">		bign c;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;b.len; j++) &#123;</span><br><span class="line">				c.s[i+j]+=s[i]*b.s[j];<span class="comment">//本位</span></span><br><span class="line">				c.s[i+j+<span class="number">1</span>]+=c.s[i+j]/<span class="number">10</span>;<span class="comment">//进位</span></span><br><span class="line">				c.s[i+j]%=<span class="number">10</span>;<span class="comment">//调整本位</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		c.len=len+b.len+<span class="number">1</span>;</span><br><span class="line">		c.clean();</span><br><span class="line">		<span class="keyword">return</span> c;</span><br><span class="line">	&#125;</span><br><span class="line">	bign <span class="keyword">operator</span> / (<span class="keyword">const</span> bign &amp;b) &#123;</span><br><span class="line">        bign c, f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            f =f*<span class="number">10</span>;</span><br><span class="line">            f.s[<span class="number">0</span>] = s[i];</span><br><span class="line">            <span class="keyword">while</span>(f &gt;= b) &#123;</span><br><span class="line">                f =f- b;</span><br><span class="line">                c.s[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        c.len = len;</span><br><span class="line">        c.clean();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> bign &amp;b) &#123;<span class="comment">//重载运算符 &gt;</span></span><br><span class="line">		<span class="keyword">if</span>(len!=b.len) <span class="keyword">return</span> len&gt;b.len;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123; <span class="comment">//从高位开始对比</span></span><br><span class="line">			<span class="keyword">if</span>(s[i]!=b.s[i]) <span class="keyword">return</span> s[i]&gt;b.s[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> bign &amp;b) &#123;</span><br><span class="line">		<span class="keyword">if</span>(len!=b.len) <span class="keyword">return</span> len&lt;b.len;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]!=b.s[i]) <span class="keyword">return</span> s[i]&lt;b.s[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> bign &amp;b) &#123;</span><br><span class="line">		<span class="keyword">return</span> !(*<span class="keyword">this</span>&gt;b) &amp;&amp; !(*<span class="keyword">this</span>&lt;b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> bign &amp;b) &#123;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>&gt;b || *<span class="keyword">this</span>==b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="comment">//将高度精值转换成字符</span></span><br><span class="line">		<span class="built_in">string</span> re=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) re=(<span class="keyword">char</span>)(s[i]+<span class="string">'0'</span>)+re;</span><br><span class="line">		<span class="keyword">return</span> re;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream &amp;in, bign &amp;x) &#123;<span class="comment">//使高精度支持输入&gt;&gt;</span></span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	in&gt;&gt;s;	x=s.c_str(); <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp;out, <span class="keyword">const</span> bign &amp;x) &#123;<span class="comment">//使高精度支持输出</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x.len<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) out&lt;&lt;x.s[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="真香排序"><a href="#真香排序" class="headerlink" title="真香排序"></a>真香排序</h4><p>不论会什么高级模版，总会想用它</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a&lt;b;<span class="comment">//从低到高</span></span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n+<span class="number">1</span>,cmp);</span><br></pre></td></tr></table></figure>

<h4 id="桶排"><a href="#桶排" class="headerlink" title="桶排"></a>桶排</h4><p>简单来说就是记录后找下标</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x,n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">100</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		a[x]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">1</span>;m&lt;=a[i];m++)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br></pre></td></tr></table></figure>

<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>相邻元素若不按照顺序则替换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,t;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(a[i]&lt;a[j])&#123;</span><br><span class="line">             swap(a[i],a[j]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>递归拆分子序列</p>
<p><img src="https://i.loli.net/2020/04/02/q8CSv6jAZefsXaE.png" alt="image-20200329201857057.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> l, <span class="keyword">int</span> r , <span class="keyword">int</span> *t)</span></span>&#123;<span class="comment">//要排序数组a,起始l，终止r，暂存空间t</span></span><br><span class="line">  <span class="keyword">if</span>(r-l&gt;<span class="number">1</span>)&#123;    </span><br><span class="line">       <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;<span class="comment">//中间进行划分</span></span><br><span class="line">       <span class="keyword">int</span> p=l, q=m, i= l;</span><br><span class="line">   		 merge_sort(a,l,m,t);<span class="comment">//划分</span></span><br><span class="line">    	 merge_sort(a,m,r,t);<span class="comment">//划分</span></span><br><span class="line">       <span class="keyword">while</span>(p&lt;m ||q&lt;r)&#123;         </span><br><span class="line">         <span class="keyword">if</span>(q&gt;=r || (p&lt;m &amp;&amp; a[p]&lt;a[q]))</span><br><span class="line">              	t[i++] = a[p++];</span><br><span class="line">              <span class="comment">//将左则暂存至临时空间         </span></span><br><span class="line">         <span class="keyword">else</span> </span><br><span class="line">               t[i++] = a[q++];  </span><br><span class="line">               <span class="comment">//将右则暂存至临时空间	</span></span><br><span class="line">       &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=l; i&lt;r; i++)a[i]= t[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>基本思想是通过一趟排序将待排记录分割成独立的两部分,其中一部分记录的均比另一部分小,则可分别对这两部分记录继续进行排序,以达到整个序列有序.</p>
<p>假定待排序列为{r[s],r[s+1],…..r[t]},首先选取一个记录作为枢轴(pivot),然后按下述原则重新排列其余记录.</p>
<p>将所有较它小的记录安置在它之前,将所有较它大的记录安置在它之后.由此可见此”枢轴”记录最后所落的位置I作分界线,将原序列分割成两个{r[s],r[s+1],…r[i-1]}和{r[i],r[i+1],…r[t]}.这个过程称做一趟快速排序(或一次划分).</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">part</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> a[])</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> p=a[l];</span><br><span class="line">	<span class="keyword">while</span>(l&lt;r) &#123;<span class="comment">//保证没有重叠</span></span><br><span class="line">		<span class="keyword">while</span>(l&lt;r &amp;&amp; a[r]&gt;=p) r--;</span><br><span class="line">		a[l]=a[r];<span class="comment">//将右边不适宜的数字放到左边</span></span><br><span class="line">		<span class="keyword">while</span>(l&lt;r &amp;&amp; a[l]&lt;=p) l++;</span><br><span class="line">		a[r]=a[l];</span><br><span class="line">	&#125;</span><br><span class="line">	a[l]=p;</span><br><span class="line">	<span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> a[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;r) &#123;</span><br><span class="line">		<span class="keyword">int</span> p=part(l,r,a);</span><br><span class="line">		qsort(l,p,a);</span><br><span class="line">		qsort(p+<span class="number">1</span>,r,a);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/04/02/9opqN7LVQXCaEPz.png" alt="排序对比"></p>
<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tenout</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> m)</span></span>&#123;<span class="comment">//十进制转任意进制</span></span><br><span class="line">    <span class="keyword">while</span>(x)&#123;a[++n]=x%m;x/=m;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">        (a[i]&lt;<span class="number">10</span>)?(<span class="built_in">cout</span>&lt;&lt;a[i]):(<span class="built_in">cout</span>&lt;&lt;<span class="keyword">char</span>(a[i]+(<span class="string">'A'</span><span class="number">-10</span>)));<span class="comment">//如果小于10就直接输出，else输出字母</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getten</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">char</span> s[])</span></span>&#123;<span class="comment">//任意进制转十进制</span></span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);i++) </span><br><span class="line">        ans=ans*x+(<span class="built_in">isdigit</span>(s[i])?(s[i]^<span class="string">'0'</span>):(s[i]-<span class="string">'A'</span>+<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="提高"><a href="#提高" class="headerlink" title="提高"></a>提高</h2><h3 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h3><h4 id="默认存储及加边"><a href="#默认存储及加边" class="headerlink" title="默认存储及加边"></a>默认存储及加边</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">       <span class="keyword">int</span> dest;<span class="comment">//destination</span></span><br><span class="line">       <span class="keyword">int</span> val;<span class="comment">//edge's value</span></span><br><span class="line">       <span class="keyword">int</span> next;<span class="comment">//next edge</span></span><br><span class="line">  &#125;eg[mx*<span class="number">2</span>];<span class="comment">//mx is the numer of the edges, if it is undirected you need to double</span></span><br><span class="line"><span class="keyword">int</span> n,m;<span class="comment">//nomber of point in the graph，number of edge in the graph </span></span><br><span class="line"><span class="keyword">int</span> head[MAX]=&#123;<span class="number">0</span>&#125;;<span class="comment">//The head in the graph</span></span><br><span class="line"><span class="keyword">int</span> top=<span class="number">0</span>;<span class="comment">//The exact number of the edeges</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> val)</span></span>&#123; </span><br><span class="line">    eg[++top].dest=v;<span class="comment">//v is the tail of the edge(destination)</span></span><br><span class="line">    eg[top].val=val;<span class="comment">//edge's value</span></span><br><span class="line">    eg[top].next=head[u];<span class="comment">//next edge's number</span></span><br><span class="line">    head[u]=top;<span class="comment">//Remeber this edge as another edge for the head u.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> vis[mx]=&#123;<span class="number">0</span>&#125;;<span class="comment">//To make sure you won't travel through the same edge over and over again</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	vis[s]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=head[s];i;i=eg[i].next)&#123;<span class="comment">//travel</span></span><br><span class="line">		<span class="keyword">if</span>(!vis[eg[i].dest])&#123;<span class="comment">//haven't travel through</span></span><br><span class="line">			dfs(eg[i].dest);<span class="comment">//Then travel</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;//Import queue libaray</span></span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;<span class="comment">//Declare queue</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	q.push(s);vis[s]=<span class="number">1</span>;<span class="comment">//push s into the queue and vis</span></span><br><span class="line">	<span class="keyword">while</span>(!q.empty())&#123;<span class="comment">//As long as there is still elements in the queue</span></span><br><span class="line">		<span class="keyword">int</span> u=q.front();<span class="comment">//Get the front of the queue</span></span><br><span class="line">		q.pop();<span class="comment">//Get the front of the queue out</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=eg[i].next)&#123;<span class="comment">//Same old story</span></span><br><span class="line">			<span class="keyword">int</span> v=eg[i].dest;</span><br><span class="line">			<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">				q.push(v),vis[v]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="comment">//Declare another struct to restore the information for the point</span></span><br><span class="line">	<span class="keyword">int</span> dis,pos;<span class="comment">//pos means the number of the point</span></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;( <span class="keyword">const</span> node &amp;x )<span class="keyword">const</span>&#123;<span class="comment">//declare the operator '&lt;' by our own function</span></span><br><span class="line">		<span class="keyword">return</span> x.dis &lt; dis;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;node&gt; q;<span class="comment">//priority queue</span></span><br><span class="line"><span class="keyword">int</span> dis[mx],vis[mx];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	dis[s]=<span class="number">0</span>;</span><br><span class="line">	q.push((node)&#123;<span class="number">0</span>,s&#125;);<span class="comment">//push into queue as struct node</span></span><br><span class="line">	<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">		node tmp=q.top();q.pop();</span><br><span class="line">		<span class="keyword">int</span> x=tmp.pos,d=tmp.dis;</span><br><span class="line">		<span class="keyword">if</span>(!vis[x])&#123;<span class="comment">//Got to the tail, if we didn't visit it</span></span><br><span class="line">		vis[x]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=eg[i].next)&#123;</span><br><span class="line">			<span class="keyword">int</span> y=eg[i].dest;</span><br><span class="line">			<span class="keyword">if</span>(dis[y]&gt;dis[x]+eg[i].val)&#123;</span><br><span class="line">				dis[y]=dis[x]+eg[i].val;<span class="comment">//The core of the code, to replace for smaller</span></span><br><span class="line">				<span class="keyword">if</span>(!vis[y])<span class="comment">//Got to the head, if we didn't visit it</span></span><br><span class="line">					q.push((node)&#123;dis[y],y&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(g[i][k]&lt;inf&amp;&amp;g[k][j]&lt;inf&amp;&amp;g[i][j]&gt;g[i][k]+g[k][j])</span><br><span class="line">					g[i][j]=g[i][k]+g[k][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> u,v;    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dist));<span class="comment">//Initialize dist</span></span><br><span class="line">	dist[s]=<span class="number">0</span>;<span class="comment">//Get start point as 0</span></span><br><span class="line">	inque[s]=<span class="number">1</span>;<span class="comment">//Memorize the s is in the queue</span></span><br><span class="line">	q.push(s);<span class="comment">//in queue</span></span><br><span class="line">	<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">		u=q.front(), q.pop();  inque[u]=<span class="number">0</span>;<span class="comment">//Get the front of queue out</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=eg[i].next)&#123;</span><br><span class="line">			  v=eg[i].dest;</span><br><span class="line">			  <span class="keyword">if</span>(dist[v]&gt;dist[u]+eg[i].val)&#123;<span class="comment">//If find a route with smaller value</span></span><br><span class="line">				  dist[v]= dist[u]+eg[i].val;<span class="comment">//change it </span></span><br><span class="line">				  fa[v]=u;<span class="comment">//Memorize the tail of v</span></span><br><span class="line">				  <span class="keyword">if</span>(!inque[v])&#123;</span><br><span class="line">					  q.push(v), inque[v]=<span class="number">1</span>;</span><br><span class="line">				  &#125;</span><br><span class="line">			  &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Difference-between-Dij-heap-and-SPFA"><a href="#Difference-between-Dij-heap-and-SPFA" class="headerlink" title="Difference between Dij+heap and SPFA!!!"></a>Difference between Dij+heap and SPFA!!!</h4><p>Dij:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">  <span class="comment">//If priority queue is not empty</span></span><br><span class="line">		node tmp=q.top();q.pop();</span><br><span class="line">  <span class="comment">//get top out</span></span><br><span class="line">		<span class="keyword">int</span> x=tmp.pos,d=tmp.dis;</span><br><span class="line">		<span class="keyword">if</span>(!vis[x])&#123;<span class="comment">//Got to the tail, if we didn't visit it</span></span><br><span class="line">		vis[x]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=eg[i].next)&#123;</span><br><span class="line">			<span class="keyword">int</span> y=eg[i].dest;</span><br><span class="line">			<span class="keyword">if</span>(dis[y]&gt;dis[x]+eg[i].val)&#123;</span><br><span class="line">        <span class="comment">//Relax</span></span><br><span class="line">				dis[y]=dis[x]+eg[i].val;<span class="comment">//The core of the code, to replace for smaller</span></span><br><span class="line">				<span class="keyword">if</span>(!vis[y])<span class="comment">//Got to the head, if we didn't visit it</span></span><br><span class="line">					q.push((node)&#123;dis[y],y&#125;);</span><br><span class="line">        <span class="comment">//New distance and new point into the queue</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>SPFA:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">   <span class="comment">//if regular queue is not empty</span></span><br><span class="line">	u=q.front(), q.pop();  inque[u]=<span class="number">0</span>;<span class="comment">//Get the front of queue out</span></span><br><span class="line">   <span class="comment">//Get top out</span></span><br><span class="line">   <span class="comment">//And Remember!!!</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=eg[i].next)&#123;</span><br><span class="line">		  v=eg[i].dest;</span><br><span class="line">		  <span class="keyword">if</span>(dist[v]&gt;dist[u]+eg[i].val)&#123;<span class="comment">//If find a route with smaller value</span></span><br><span class="line">         <span class="comment">//Relax</span></span><br><span class="line">			  dist[v]= dist[u]+eg[i].val;<span class="comment">//change it </span></span><br><span class="line">			  fa[v]=u;<span class="comment">//Memorize the tail of v</span></span><br><span class="line">			  <span class="keyword">if</span>(!inque[v])&#123;</span><br><span class="line">           <span class="comment">//the points that are Relaxed but not in queue get into the queue</span></span><br><span class="line">				  q.push(v), inque[v]=<span class="number">1</span>;</span><br><span class="line">			  &#125;</span><br><span class="line">		  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>So the difference is clear enough:</p>
<p>Dji+heap: <strong>Small root pile</strong>, every time get the shortest distance, for this point, the shortest distance <strong>won’t change</strong>! </p>
<p>SPFA: Use <strong>queue</strong>. Get the front out of queue, might be renew in the future, it is <strong>won’t be always the same</strong>. </p>
<h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><table>
<thead>
<tr>
<th align="center">Shortest-PathsProblem</th>
<th align="center">Sparse Graph</th>
<th align="center">Dense Graph</th>
<th align="center">With negative value</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Single-Source</td>
<td align="center">Dijkstra+heap</td>
<td align="center">SPFA/Dijkstra+heap</td>
<td align="center">SPFA</td>
</tr>
<tr>
<td align="center">APSP(Undirected graph)</td>
<td align="center">SPFA/Floyd</td>
<td align="center">SPFA</td>
<td align="center">SPFA</td>
</tr>
<tr>
<td align="center">APSP(Directed graph)</td>
<td align="center">Floyd</td>
<td align="center">SPFA/Dijkstra+heap</td>
<td align="center">SPFA</td>
</tr>
</tbody></table>
<p>​                                                                        APSP((All Pairs Shortest Path))</p>
<h4 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h4><table>
<thead>
<tr>
<th align="center">Solving ways</th>
<th align="center">Time Complexity</th>
<th align="center">Space Complexity</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Dijkstra+heap</td>
<td align="center">O(E*lgV)</td>
<td align="center">O(n^2)</td>
</tr>
<tr>
<td align="center">SPFA</td>
<td align="center">O(kE) (Not stable)</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="center">Floyd</td>
<td align="center">O(n^3)</td>
<td align="center">O(n)</td>
</tr>
</tbody></table>
<h2 id="树论"><a href="#树论" class="headerlink" title="树论"></a>树论</h2><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> l,r;<span class="comment">//区间左右端点</span></span><br><span class="line">	ll value;<span class="comment">//区间和值</span></span><br><span class="line">	ll add,time;<span class="comment">//区间同时增加或乘一个数的延迟标记</span></span><br><span class="line">&#125;;</span><br><span class="line">Node tr[MAX&lt;&lt;<span class="number">2</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll aa[MAX]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll N,M,P;</span><br><span class="line"><span class="function">ll <span class="title">Read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> c=getchar();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>) &#123;	<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;	c=getchar(); &#125;</span><br><span class="line">	<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)x=x*<span class="number">10</span>+c-<span class="string">'0'</span>,c=getchar();</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化线段树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">	tr[i].l=l,tr[i].r=r,tr[i].value=<span class="number">0</span>,tr[i].time=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">		tr[i].value=aa[l];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	build(i&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>);<span class="comment">//建立左子树区间</span></span><br><span class="line">	build(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,((l+r)&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>,r);<span class="comment">//建立右子树区间</span></span><br><span class="line">	tr[i].value=tr[i&lt;&lt;<span class="number">1</span>].value+tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value;<span class="comment">//更新编号为i的区间和(由左右儿子来)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向下更新</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[i].add==<span class="number">0</span>&amp;&amp;tr[i].time==<span class="number">1</span>) <span class="keyword">return</span>;<span class="comment">//无需向下更新</span></span><br><span class="line">	<span class="keyword">if</span>( tr[i].l==tr[i].r ) &#123;<span class="comment">//避免访问无效内存(叶子没有儿子)</span></span><br><span class="line">		tr[i].add=<span class="number">0</span>;</span><br><span class="line">		tr[i].time=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	tr[i&lt;&lt;<span class="number">1</span>].value=(tr[i&lt;&lt;<span class="number">1</span>].value*tr[i].time+tr[i].add*(tr[i&lt;&lt;<span class="number">1</span>].r-tr[i&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>))%P;</span><br><span class="line">	<span class="comment">//左儿子区间值</span></span><br><span class="line">	tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value=(tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value*tr[i].time+tr[i].add*(tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>))%P;</span><br><span class="line">	<span class="comment">//右儿子区间值</span></span><br><span class="line">	tr[i&lt;&lt;<span class="number">1</span>].time=tr[i&lt;&lt;<span class="number">1</span>].time*tr[i].time%P;<span class="comment">//左儿子更新倍数</span></span><br><span class="line">	tr[i&lt;&lt;<span class="number">1</span>].add=(tr[i&lt;&lt;<span class="number">1</span>].add*tr[i].time+tr[i].add)%P;<span class="comment">//左儿子更新增加数</span></span><br><span class="line">	tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].time=tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].time*tr[i].time%P;<span class="comment">//右儿子更新倍数</span></span><br><span class="line">	tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].add=(tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].add*tr[i].time+tr[i].add)%P;<span class="comment">//右儿子更新增加数</span></span><br><span class="line">	tr[i].add=<span class="number">0</span>;<span class="comment">//add延迟标记复0</span></span><br><span class="line">	tr[i].time=<span class="number">1</span>;<span class="comment">//time倍增延迟标记恢复1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//区间求和 (区间查询)</span></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=tr[i].l&amp;&amp;r&gt;=tr[i].r) &#123;<span class="comment">//刚好罩着区间</span></span><br><span class="line">		<span class="keyword">return</span> tr[i].value;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;tr[i].r||r&lt;tr[i].l) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//不相关区间</span></span><br><span class="line">	pushdown(i);<span class="comment">//向下更新延迟标记值</span></span><br><span class="line">	<span class="keyword">return</span> (query(i&lt;&lt;<span class="number">1</span>,l,r)+query(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r));<span class="comment">//返回左右儿子区间和值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//区间更新(将区间增加一个值k)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateadd</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	pushdown(i);</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=tr[i].l&amp;&amp;r&gt;=tr[i].r) &#123;</span><br><span class="line">		tr[i].value+=(tr[i].r-tr[i].l+<span class="number">1</span>)*k%P;</span><br><span class="line">		tr[i].add=k%P;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(r&lt;tr[i].l||l&gt;tr[i].r) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	updateadd(i&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">	updateadd(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">	tr[i].value=(tr[i&lt;&lt;<span class="number">1</span>].value+tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value)%P;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//区间更新(将区间每个值*上一个值k)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatetime</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	pushdown(i);</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=tr[i].l&amp;&amp;r&gt;=tr[i].r) &#123;<span class="comment">//此处对照区间增加一个值</span></span><br><span class="line">		tr[i].value=tr[i].value*k%P;</span><br><span class="line">		tr[i].time=k%P;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(r&lt;tr[i].l||l&gt;tr[i].r) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	updatetime(i&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">	updatetime(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">	tr[i].value=(tr[i&lt;&lt;<span class="number">1</span>].value+tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value)%P;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("data.txt","r",stdin);</span></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> o,a,b,k;</span><br><span class="line">	N=Read(),M=Read(),P=Read();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=N; i++)	aa[i]=Read();</span><br><span class="line">	build(<span class="number">1</span>,<span class="number">1</span>,N);<span class="comment">//将数据离散到线段树上</span></span><br><span class="line">	<span class="keyword">while</span>(M--) &#123;</span><br><span class="line">		o=Read(),a=Read(),b=Read();</span><br><span class="line">		<span class="keyword">if</span>(o==<span class="number">1</span>) &#123;<span class="comment">//区间倍增k</span></span><br><span class="line">			k=Read();</span><br><span class="line">			updatetime(<span class="number">1</span>,a,b,k);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(o==<span class="number">2</span>) &#123;<span class="comment">//区间增加k</span></span><br><span class="line">			k=Read();</span><br><span class="line">			updateadd(<span class="number">1</span>,a,b,k);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(o==<span class="number">3</span>) &#123;<span class="comment">//区间查询</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(<span class="number">1</span>,a,b)%P);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><p><img src="https://i.loli.net/2020/04/02/LiM8J95WDxcpCd6.png" alt=""></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">bit</span>[mx+<span class="number">1</span>], n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//Calculate the sum</span></span><br><span class="line">  <span class="keyword">int</span> s =<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    s+=<span class="built_in">bit</span>[i];  i-=lowbit(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//Add x to i</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">       <span class="built_in">bit</span>[i]+=x; i+=lowbit(i);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重链剖分-lca"><a href="#重链剖分-lca" class="headerlink" title="重链剖分+lca"></a>重链剖分+lca</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s;<span class="comment">//分别表示树的结点个数、询问的个数和树根结点的序号</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mx=<span class="number">500005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> d;</span><br><span class="line">	<span class="keyword">int</span> w;</span><br><span class="line">	<span class="keyword">int</span> next;</span><br><span class="line">&#125; eg[mx&lt;&lt;<span class="number">1</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dis[mx]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,head[mx]= &#123;<span class="number">0</span>&#125;,dep[mx]= &#123;<span class="number">0</span>&#125;,siz[mx]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> son[mx]= &#123;<span class="number">0</span>&#125;,fa[mx]= &#123;<span class="number">0</span>&#125;,top[mx]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//增加边</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> c=getchar();</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>) c=getchar();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">'9'</span>&amp;&amp;c&gt;=<span class="string">'0'</span>) x=x*<span class="number">10</span>+c-<span class="string">'0'</span>,c=getchar();</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">	eg[++cnt].d=v,eg[cnt].w=w,eg[cnt].next=head[u],head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">	siz[u]=<span class="number">1</span>, son[u]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>( <span class="keyword">int</span> i=head[u]; i; i=eg[i].next ) &#123;</span><br><span class="line">		<span class="keyword">int</span> v=eg[i].d;</span><br><span class="line">		<span class="keyword">if</span>(v!=fa[u]) &#123;</span><br><span class="line">			dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">			fa[v]=u;</span><br><span class="line">			dfs1(v);</span><br><span class="line">			siz[u]+=siz[v];<span class="comment">//计算儿子节点个数</span></span><br><span class="line">			<span class="keyword">if</span>(!son[u] || siz[v]&gt;siz[son[u]]) son[u]=v;<span class="comment">//记录重儿子结点编号</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span> </span>&#123;</span><br><span class="line">	top[u]=tp;</span><br><span class="line">	<span class="keyword">if</span>(son[u]) dfs2(son[u],tp);<span class="comment">//拉重链</span></span><br><span class="line">	<span class="keyword">for</span>( <span class="keyword">int</span> i=head[u]; i; i=eg[i].next ) &#123;</span><br><span class="line">		<span class="keyword">int</span> v=eg[i].d;</span><br><span class="line">		<span class="keyword">if</span>( v!=fa[u] &amp;&amp; v!=son[u] ) dfs2(v,v);<span class="comment">//拉轻链</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;	</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">       <span class="keyword">if</span>(dep[top[x]]&gt;=dep[top[y]])	x=fa[top[x]];</span><br><span class="line">       <span class="keyword">else</span> y=fa[top[y]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[x]&lt;dep[y]? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> x,y; </span><br><span class="line">		x=Read(), y=Read();</span><br><span class="line">		addEdge(x,y,<span class="number">0</span>);</span><br><span class="line">		addEdge(y,x,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	dfs1(s);</span><br><span class="line">	dfs2(s,s);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> x,y; </span><br><span class="line">		x=Read(), y=Read();</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lca(x,y));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><p>离散化后只能知道数据之间的相对大小，但无法确定它们的真实值；</p>
<p>离散化的三个步骤：</p>
<p>1 sort排序</p>
<p>2 unique去重</p>
<p>3 lower_bound索引</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    b[i]=a[i];    <span class="comment">//b[]是a[]的副本</span></span><br><span class="line">&#125;</span><br><span class="line">sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);  <span class="comment">//排序</span></span><br><span class="line"><span class="keyword">int</span> sum=unique(b+<span class="number">1</span>,b+<span class="number">1</span>+n)-b<span class="number">-1</span>;  <span class="comment">//去重</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    a[i]=lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+sum,a[i])-b;<span class="comment">//索引</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>隔离日记</title>
    <url>/Blogs/2020/03/29/Segragate-notes/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​        时值Coronavirus，我原定计划是28号从美国洛杉矶返回成都，随着政策不断刷新，先是台湾香港禁止转机，再加上国内城市转机也要隔离的禁令，我的机票连续切换了三次，终于在洛杉矶时间26日，我成功登上了回国的末班机，但是我被迫在广州开始时长14天的隔离。</p>
<h2 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h2><p>疫情影响，只有全副武装才能survive</p>
<p>所以我带上了眼镜和口罩</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGt7Yn.jpg" alt=""></p>
<p>我做的防护真的算少的了，像周围的朋友都穿的是生化危机同款防护服</p>
<p>一路上我不停用酒精洗手液洗手，热死我也不摘口罩</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGtIoj.jpg" alt=""></p>
<p>登机之前我们会在微信上填一个申报表</p>
<p>会生成这样的二维码</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGtOyT.png" alt=""></p>
<p>当然你如果上机的时候没填，落地也有的是时间</p>
<h2 id="途中"><a href="#途中" class="headerlink" title="途中"></a>途中</h2><p>像我这种惜命的人一定是防护拉满</p>
<p>每隔半个小时用酒精洗手液洗一次手</p>
<p>下飞机后游酒精湿纸巾把自己在飞机上用过的东西都擦了一遍</p>
<p>能打字绝不说话</p>
<p>煎熬了接近15个小时</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGtfOS.jpg" alt=""></p>
<p>终于熬到了降落</p>
<h2 id="降落广州"><a href="#降落广州" class="headerlink" title="降落广州"></a>降落广州</h2><p>广州降落操作就骚多了</p>
<p>最让我搞不明白的是飞机降落后先是叫了几个人下机</p>
<p>没错，就叫了那一次</p>
<p>然后其他人都在座位上<strong>等了一个多小时</strong></p>
<p>其中人中不乏老人与婴儿</p>
<p>根据我的理解</p>
<p>应该先让抵抗力低的群体下飞机</p>
<p>就算是有症状者，先下飞机不会增加感染可能吗？</p>
<p>最后居然是一节一节下飞机</p>
<p>骚</p>
<p>在这里<strong>先</strong>对安排提出质疑</p>
<p>一切<strong>还是</strong>服从国家安排</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGtqS0.jpg" alt=""></p>
<h2 id="机场"><a href="#机场" class="headerlink" title="机场"></a>机场</h2><p>下飞机后为了这个申报码又停了大概40分钟</p>
<p>过海关的时候又把我拦了</p>
<p>说要什么<strong>检疫放行条</strong></p>
<p>太骚了我们这趟航班的人因为没有进行核酸检疫</p>
<p>所以部门都不会给我们开</p>
<p>最后在卡了我十几分钟后又把我给放了</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGtXOU.jpg" alt=""></p>
<p>然后就是排队上大巴</p>
<p>到酒店时已是11:00</p>
<p>（飞机5:30降落）</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGtfOS.jpg" alt=""></p>
<p>有一说一</p>
<p>政府的管理相当到位</p>
<p>需要走的地方都做了指示</p>
<p>隔离也是根据住址隔离</p>
<p>广东本地人应该是回到自己所在区隔离</p>
<p>外地人想转机的都只有现在广州隔离14天再转机</p>
<p>都是统一隔离在白云区的酒店</p>
<p>我们到酒店再进行核酸检测</p>
<p>拿个棉签在嘴巴里捅一下就好了</p>
<p>到目前为止还是被我国的掌控力给震撼到</p>
<p><strong>整挺好</strong></p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGt2SP.jpg" alt=""></p>
<p>但是酒店隔离的骚操作就打出来了</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>告知墙</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGNZ0e.jpg" alt=""></p>
<p>隔离住宿费良心点赞</p>
<p><img src="https://i.loli.net/2020/04/02/wl3DH87cLUNgXry.png" alt="住宿费"></p>
<p>但是禁止外卖还有快递qaq</p>
<p>禁止这些我还是能够理解</p>
<p>为了防止疫情的传播</p>
<p>但是为什么就不能由酒店的工作人员帮忙送这些物件呢？</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>图为到达当日午餐</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGtLlV.jpg" alt=""></p>
<p>就这？</p>
<p>我在飞机上是啥也没吃</p>
<p>在酒店等了半天还只能吃凉的</p>
<p>关键是吃不饱</p>
<p>苦等晚餐</p>
<p>结果等到了8:00还没送过来</p>
<p>到第二天早上都没吃到晚餐</p>
<p>早上6:00起床预定早餐现在都9:00了还没送过来</p>
<p>你要是能让我点外卖或者快递送方便面我也不至于</p>
<p>修仙。。。</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGtzTJ.jpg" alt=""></p>
<h2 id="想说的话"><a href="#想说的话" class="headerlink" title="想说的话"></a>想说的话</h2><p>我就把午餐发到空间吐槽一下</p>
<p>没想到又遭来了众人的嘲讽</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGtWy8.jpg" alt=""></p>
<p>在网上也有各种对留学生的攻击</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGNCf1.jpg" alt=""></p>
<p>有一说一</p>
<p>留学生其实并不容易</p>
<p>我记得国内刚爆发疫情的时候</p>
<p>我们一家去各个药店商店想买口罩寄送回国</p>
<p>问店主都说口罩被中国人买完了</p>
<p>后来才知道原来留学生们为了支援自己的祖国基本上都把美国的口罩寄空了</p>
<p>同时基本寄空了的还有消毒用品</p>
<p>现在疫情传到国外了，美国一天爆发<strong>一万</strong>多例</p>
<p>我在写博客的这天人数已到达<strong>十万</strong></p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGNiSx.png" alt=""></p>
<p>美国住家不戴口罩上班甚至回家也不洗手消毒</p>
<p>这谁<strong>TM</strong>顶得住</p>
<p>在国外要治疗的话肯定是优先考虑本国人</p>
<p>不回来留在国外等死？</p>
<p>（回国重要性）</p>
<p>留学生不听从指挥的就只有那几个人</p>
<p>没必要对一个团体进行指责</p>
<p>更进一步说</p>
<p>我完全可以把这种行为归结于<strong>仇富</strong></p>
<p>网络上的喷子太多了</p>
<p><strong>明星</strong>片酬太高就有人说这些钱应该给<strong>科学家</strong></p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGtvmF.png" alt=""></p>
<p><strong>钟南山</strong>儿子用个爱马仕就被骂</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGt5wQ.jpg" alt=""></p>
<p><strong>可悲</strong></p>
<p>留学生出国没花您一分钱</p>
<p>您看不见留学生为祖国捐出的物资</p>
<p>您也不知道留学生为疫情作出的努力</p>
<p>就请不要随便乱说话</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGNpk9.jpg" alt=""></p>
<p>最后</p>
<p>求打赏一顿饭钱</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGtqS0.jpg" alt=""></p>
<p>美国的感染人数有兴趣可以去这个<a href="https://www.cdc.gov/coronavirus/2019-ncov/cases-updates/cases-in-us.html" target="_blank" rel="noopener">官方网站</a>吃瓜哟</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown guide</title>
    <url>/Blogs/2020/03/26/Markdown-guide/</url>
    <content><![CDATA[<p>转载自<a href="https://siriusq.top/Markdown写作语法.html" target="_blank" rel="noopener">siriusq</a></p>
<p>编写博客需要使用Markdown，因此需要熟记语法规则，虽然Markdown语法比较少，但是一个一个查起来也是很蛋疼的</p>
<p><strong>常用的Markdown语法规则有：</strong></p>
<ul>
<li>标题（我把标题扔到网页最后面了，目录被打乱了。。。）</li>
<li>字体加粗倾斜</li>
<li>引用</li>
<li>分割线</li>
<li>图片</li>
<li>超链接</li>
<li>列表</li>
<li>表格</li>
<li>代码</li>
<li>小文本</li>
<li>特殊字符转义</li>
<li>字体颜色大小</li>
<li>文本居中</li>
<li>勾选框</li>
<li>首行缩进</li>
<li>链接到其他文章</li>
<li>文字背景色</li>
<li>标签</li>
<li>选项卡</li>
<li>按钮</li>
</ul>
<h1 id="字体加粗倾斜"><a href="#字体加粗倾斜" class="headerlink" title="字体加粗倾斜"></a>字体加粗倾斜</h1><p>字体倾斜需要在文本两端各加一个<code>*</code>号<br>字体加粗需要在文本两端各加两个<code>*</code>号<br>字体同时倾斜加粗需要在文本两端各加三个<code>*</code>号<br>字体加入删除线需要在文本两端各加两个<code>~~</code></p>
<p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*倾斜的文字*</span><br><span class="line">**加粗的文字**</span><br><span class="line">***倾斜加粗的文字***</span><br><span class="line">~~加删除线的文字~~</span><br><span class="line">++加下划线的文字++</span><br></pre></td></tr></table></figure>

<p><strong>预览效果</strong></p>
<p><em>倾斜的文字</em><br><strong>加粗的文字</strong><br><strong><em>倾斜加粗的文字\</em></strong><br><del>加删除线的文字</del><br>++加下划线的文字++</p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>引用需要在文本前加一个<code>&gt;</code>,引用可以嵌套，比如两个<code>&gt;&gt;</code>或三个<code>&gt;&gt;&gt;</code></p>
<p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 引用的文本</span><br><span class="line">&gt;&gt; 嵌套的引用文本</span><br><span class="line">&gt;&gt;&gt; 再次嵌套的文本</span><br></pre></td></tr></table></figure>

<p><strong>预览效果</strong></p>
<blockquote>
<p>引用的文本</p>
<blockquote>
<p>嵌套的引用文本</p>
<blockquote>
<p>再次嵌套的文本</p>
</blockquote>
</blockquote>
</blockquote>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>分割线使用连续三个及以上的<code>*</code>或<code>-</code>实现，前后都有段落时各空出一行</p>
<p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">-----</span><br></pre></td></tr></table></figure>

<p><strong>预览效果</strong></p>
<hr>
<hr>
<hr>
<hr>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>使用链接形式插入图片</p>
<p><strong>语法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片alt](图片url 图片title)</span><br></pre></td></tr></table></figure>

<p>其中<code>图片alt</code>为图片下面的文字，相当于注释，<code>图片url</code>为图片的地址，<code>图片title</code>为鼠标悬浮到图片上显示的内容，此项选填</p>
<h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>超链接形式和图片类似，删掉前面的<code>!</code>即可</p>
<h2 id="普通链接方法"><a href="#普通链接方法" class="headerlink" title="普通链接方法"></a>普通链接方法</h2><p><strong>语法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[超链接名称](超链接地址 超链接title)</span><br></pre></td></tr></table></figure>

<p><code>超链接title</code>选填，鼠标悬浮时显示</p>
<p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Github](https:&#x2F;&#x2F;github.com github)</span><br></pre></td></tr></table></figure>

<p><strong>预览效果</strong></p>
<p><a href="[https://github.com](https://github.com/">Github</a> Github)</p>
<h2 id="高级链接方法"><a href="#高级链接方法" class="headerlink" title="高级链接方法"></a>高级链接方法</h2><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用1作为变量 [Github][1]</span><br><span class="line">	在末尾为1赋值</span><br><span class="line">[1]:https:&#x2F;&#x2F;github.com github</span><br></pre></td></tr></table></figure>

<p><strong>预览效果</strong></p>
<p>使用1作为变量 <a href="https://github.com(https://github.com/)" target="_blank" rel="noopener">Github</a><br>在末尾为1赋值</p>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表分为有序列表和无序列表,都可以嵌套，嵌套时在下一个列表前加<code>Tab</code>或加三个空格<br>其中有序列表使用符号<code>*</code>或<code>+</code>或<code>-</code>即可</p>
<p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- C</span><br><span class="line">+ C++</span><br><span class="line">* Java</span><br><span class="line"></span><br><span class="line">- 嵌套1</span><br><span class="line">	- 嵌套2</span><br><span class="line">		- 嵌套3</span><br><span class="line"></span><br><span class="line">1. C</span><br><span class="line">2. C++</span><br><span class="line">3. Java</span><br><span class="line"></span><br><span class="line">1. 嵌套1</span><br><span class="line">	1. 嵌套2</span><br><span class="line">	2. 嵌套2（1）</span><br><span class="line">	3. 嵌套2（2）</span><br><span class="line">		1. 嵌套3</span><br><span class="line">		2. 嵌套3（1）</span><br><span class="line">	2. 嵌套2（3）</span><br><span class="line">2. 嵌套1（1）</span><br></pre></td></tr></table></figure>

<p><strong>预览效果</strong></p>
<ul>
<li><p>C</p>
</li>
<li><p>C++</p>
</li>
<li><p>Java</p>
</li>
<li><p>嵌套1</p>
<ul>
<li>嵌套1<ul>
<li>嵌套3</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li><p>C</p>
</li>
<li><p>C++</p>
</li>
<li><p>Java</p>
</li>
<li><p>嵌套1</p>
<ol>
<li>嵌套2</li>
<li>嵌套2（1）</li>
<li>嵌套2（2）<ol>
<li>嵌套3</li>
<li>嵌套3（1）</li>
</ol>
</li>
<li>嵌套2（3）</li>
</ol>
</li>
<li><p>嵌套1（1）</p>
</li>
</ol>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">-|:-:|-:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></table></figure>

<p>其中第二行表示对齐方式</p>
<ul>
<li>默认为左对齐，只写<code>-</code></li>
<li>居中为<code>:-:</code></li>
<li>右对齐为<code>-:</code></li>
</ul>
<p><strong>预览效果</strong></p>
<table>
<thead>
<tr>
<th align="left">表头</th>
<th align="left">表头</th>
<th align="left">表头</th>
</tr>
</thead>
<tbody><tr>
<td align="left">内容</td>
<td align="left">内容</td>
<td align="left">内容</td>
</tr>
<tr>
<td align="left">内容</td>
<td align="left">内容</td>
<td align="left">内容</td>
</tr>
</tbody></table>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码使用反引号 <code>表示，反引号是键盘左上角的</code>~`键输入，而不是键盘右边的引号<br>连续三个反引号可以生成代码块，代码块后面的字符表示不同的语言类型，示例中多打了括号</p>
<p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;Hello World！&#96;</span><br><span class="line">	(&#96;&#96;&#96;cpp)</span><br><span class="line">    #include &lt;stdio.h&gt;</span><br><span class="line">    int main(void)&#123;</span><br><span class="line">    	printf(&quot;Hello World!&quot;);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    (&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure>

<p><strong>预览效果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(void)&#123;</span><br><span class="line">	printf(&quot;Hello World!&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码块语言说明"><a href="#代码块语言说明" class="headerlink" title="代码块语言说明"></a>代码块语言说明</h2><p>三个反引号后面的语言格式说明</p>
<table>
<thead>
<tr>
<th align="left">语言</th>
<th align="left">格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Bash</td>
<td align="left">bash</td>
</tr>
<tr>
<td align="left">C#</td>
<td align="left">cs</td>
</tr>
<tr>
<td align="left">C语言</td>
<td align="left">cpp</td>
</tr>
<tr>
<td align="left">CSS</td>
<td align="left">css</td>
</tr>
<tr>
<td align="left">DOS</td>
<td align="left">dos</td>
</tr>
<tr>
<td align="left">Go</td>
<td align="left">go</td>
</tr>
<tr>
<td align="left">HTML</td>
<td align="left">xml</td>
</tr>
<tr>
<td align="left">ini</td>
<td align="left">ini</td>
</tr>
<tr>
<td align="left">Matlab</td>
<td align="left">matlab</td>
</tr>
<tr>
<td align="left">Markdown</td>
<td align="left">markdown</td>
</tr>
<tr>
<td align="left">makefile</td>
<td align="left">makefile</td>
</tr>
<tr>
<td align="left">Json</td>
<td align="left">json</td>
</tr>
<tr>
<td align="left">Java</td>
<td align="left">java</td>
</tr>
<tr>
<td align="left">JavaScript</td>
<td align="left">js / javascript</td>
</tr>
<tr>
<td align="left">Objective-C</td>
<td align="left">objectivec</td>
</tr>
<tr>
<td align="left">PHP</td>
<td align="left">php</td>
</tr>
<tr>
<td align="left">PowerShell</td>
<td align="left">powershell</td>
</tr>
<tr>
<td align="left">Processing</td>
<td align="left">processing</td>
</tr>
<tr>
<td align="left">Python</td>
<td align="left">python</td>
</tr>
<tr>
<td align="left">R</td>
<td align="left">r</td>
</tr>
<tr>
<td align="left">Ruby</td>
<td align="left">ruby</td>
</tr>
<tr>
<td align="left">SQL</td>
<td align="left">sql</td>
</tr>
<tr>
<td align="left">Swift</td>
<td align="left">swift</td>
</tr>
<tr>
<td align="left">TeX</td>
<td align="left">tex</td>
</tr>
<tr>
<td align="left">VBScript</td>
<td align="left">vbscript</td>
</tr>
<tr>
<td align="left">VB.Net</td>
<td align="left">vbnet</td>
</tr>
<tr>
<td align="left">Vim Script</td>
<td align="left">vim</td>
</tr>
</tbody></table>
<h1 id="小文本"><a href="#小文本" class="headerlink" title="小文本"></a>小文本</h1><p>在文本两端分别加入<code>和</code>即可生成小文本</p>
<p><strong>示例</strong><br><code>小文本</code></p>
<p><strong>预览效果</strong></p>
<p>小文本</p>
<h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><p>在使用一些特殊符号(如<code>#</code>)时需要在符号前加<code>\</code>进行转义，否则符号不会正确显示</p>
<p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\#</span><br><span class="line">\*</span><br><span class="line">\!</span><br><span class="line">\+</span><br><span class="line">\-</span><br></pre></td></tr></table></figure>

<p><strong>预览效果</strong></p>
<p>#<br>*<br>!<br>+<br>-</p>
<h2 id="特殊转义"><a href="#特殊转义" class="headerlink" title="特殊转义"></a>特殊转义</h2><p>部分特殊字符需要使用字符串转义</p>
<table>
<thead>
<tr>
<th align="left">特殊字符</th>
<th align="left">转义符号</th>
<th align="left">中文名称</th>
<th align="left">英文名称</th>
</tr>
</thead>
<tbody><tr>
<td align="left">!</td>
<td align="left"><code>!</code></td>
<td align="left">感叹号</td>
<td align="left">Exclamation mark</td>
</tr>
<tr>
<td align="left">“</td>
<td align="left"><code>&quot;</code> <code>&quot;</code></td>
<td align="left">双引号</td>
<td align="left">Quotation mark</td>
</tr>
<tr>
<td align="left">#</td>
<td align="left"><code>#</code></td>
<td align="left">数字标志</td>
<td align="left">Number sign</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left"><code>$</code></td>
<td align="left">美元标志</td>
<td align="left">Dollar sign</td>
</tr>
<tr>
<td align="left">%</td>
<td align="left"><code>%</code></td>
<td align="left">百分号</td>
<td align="left">Percent sign</td>
</tr>
<tr>
<td align="left">&amp;</td>
<td align="left"><code>&amp;</code> <code>&amp;</code></td>
<td align="left">与</td>
<td align="left">Ampersand</td>
</tr>
<tr>
<td align="left">‘</td>
<td align="left"><code>&#39;</code></td>
<td align="left">单引号</td>
<td align="left">Apostrophe</td>
</tr>
<tr>
<td align="left">(</td>
<td align="left"><code>(</code></td>
<td align="left">小括号左边部分</td>
<td align="left">Left parenthesis</td>
</tr>
<tr>
<td align="left">)</td>
<td align="left"><code>)</code></td>
<td align="left">小括号右边部分</td>
<td align="left">Right parenthesis</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left"><code>*</code></td>
<td align="left">星号</td>
<td align="left">Asterisk</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left"><code>+</code></td>
<td align="left">加号</td>
<td align="left">Plus sign</td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left"><code>&lt;</code> <code>&lt;</code></td>
<td align="left">小于号</td>
<td align="left">Less than</td>
</tr>
<tr>
<td align="left">=</td>
<td align="left"><code>=</code></td>
<td align="left">等于符号</td>
<td align="left">Equals sign</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left"><code>-</code> <code>−</code></td>
<td align="left">减号</td>
<td align="left">Minus</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left"><code>&gt;</code> <code>&gt;</code></td>
<td align="left">大于号</td>
<td align="left">Greater than</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left"><code>?</code></td>
<td align="left">问号</td>
<td align="left">Question mark</td>
</tr>
<tr>
<td align="left">@</td>
<td align="left"><code>@</code></td>
<td align="left">艾特</td>
<td align="left">Commercial at</td>
</tr>
<tr>
<td align="left">[</td>
<td align="left"><code>[</code></td>
<td align="left">中括号左边部分</td>
<td align="left">Left square bracket</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left"><code>\</code></td>
<td align="left">反斜杠</td>
<td align="left">Reverse solidus (backslash)</td>
</tr>
<tr>
<td align="left">]</td>
<td align="left"><code>]</code></td>
<td align="left">— 中括号右边部分</td>
<td align="left">Right square bracket</td>
</tr>
<tr>
<td align="left">{</td>
<td align="left"><code>{</code></td>
<td align="left">大括号左边部分</td>
<td align="left">Left curly brace</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">`</td>
<td align="left">`</td>
<td align="left">竖线</td>
</tr>
<tr>
<td align="left">}</td>
<td align="left"><code>}</code></td>
<td align="left">大括号右边部分</td>
<td align="left">Right curly brace</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code></code></td>
<td align="left">空格</td>
<td align="left">Space</td>
</tr>
</tbody></table>
<h1 id="字体颜色大小"><a href="#字体颜色大小" class="headerlink" title="字体颜色大小"></a>字体颜色大小</h1><ul>
<li>Hexo只支持黑色字体，可以使用Html语言调整颜色，使用<code>和</code>包裹需要变色的字体，<code>ff0000</code>可以替换为其他颜色代码。</li>
<li>字号同样使用Html语言调整，使用<code>和</code>包裹需要改变大小的字体，<code>font size=</code>后是调整的字号。</li>
<li>字体同样使用Html语言调整，使用<code>和</code>包裹需要改变的字体，<code>font face=</code>后是调整的字体名称。</li>
<li>颜色字号字体三者可以叠加使用</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font color&#x3D;&quot;ff0000&quot;&gt;这是红色字&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font size&#x3D;2&gt;这是2号字&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font face&#x3D;&quot;华文彩云&quot;&gt;这是华文彩云字&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font face&#x3D;&quot;华文彩云&quot; size&#x3D;2 color&#x3D;&quot;ff0000&quot;&gt;这是2号红色华文彩云字&lt;&#x2F;font&gt;</span><br></pre></td></tr></table></figure>

<p><strong>预览</strong><br>这是红色字<br>这是2号字<br>这是华文彩云字<br>这是2号红色华文彩云字</p>
<h1 id="字体居中"><a href="#字体居中" class="headerlink" title="字体居中"></a>字体居中</h1><p>字体居中同样使用Html语言包裹，有三种格式<br><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% centerquote %&#125;这是居中字体&#123;% endcenterquote %&#125;</span><br><span class="line"> &lt;blockquote class&#x3D;&quot;blockquote-center&quot;&gt;这是居中字体&lt;&#x2F;blockquote&gt;</span><br><span class="line">&#123;% cq %&#125;这是居中字体&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>预览</strong></p>
<blockquote>
<p>这是居中字体</p>
</blockquote>
<blockquote>
<p>这是居中字体</p>
</blockquote>
<blockquote>
<p>这是居中字体</p>
</blockquote>
<h1 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h1><p>一种类似todo list的东西<br><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [ ]这是勾选框</span><br></pre></td></tr></table></figure>

<p><strong>预览</strong></p>
<ul>
<li>[ ]这是勾选框</li>
</ul>
<h1 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h1><p>Hexo会把缩进的空格忽略掉，所以需要使用转义来进行首行缩进<br><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;emsp;&amp;emsp;这是首行缩进的文本</span><br></pre></td></tr></table></figure>

<p><strong>预览</strong><br>  这是首行缩进的文本</p>
<h1 id="链接到其他文章"><a href="#链接到其他文章" class="headerlink" title="链接到其他文章"></a>链接到其他文章</h1><p>Hexo支持引入其他文章链接，语法为<code>和</code>,其中<code>slug</code>是要引用markdown的文件名，title是引用文章的标题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_link Hexo博客踩坑指北 [Hexo博客指北] %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>预览</strong></p>
<p><a href="https://siriusq.top/Hexo博客踩坑指北.html" target="_blank" rel="noopener">[Hexo博客指北]</a></p>
<h1 id="文字背景色"><a href="#文字背景色" class="headerlink" title="文字背景色"></a>文字背景色</h1><p>文字背景色需要使用Html表格设置，在<code>bgcolor</code>后设置文字背景色，使用颜色英文名<br><strong>预览</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor&#x3D;lightblue&gt;背景色yellow&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<p>亮蓝色背景色</p>
<h1 id="Note标签"><a href="#Note标签" class="headerlink" title="Note标签"></a>Note标签</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>需要在Next主题配置文件中选择样式，打开<code>_config.yml</code>并搜索<code>Note tag (bs-callout)</code>,下面是我的配置,<code>style</code>共有五种，预览可以在<a href="https://github.com/iissnan/hexo-theme-next/pull/1697" target="_blank" rel="noopener">这里</a>查看，<code>icon</code>用于设置是否显示图标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Note tag (bs-callout)</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: flat</span><br><span class="line">  icons: true</span><br><span class="line">  border_radius: 3</span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure>

<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>使用``包裹需要显示的内容，<code>class</code>后面显示note的风格，加上<code>no-icon</code>可以隐藏图标<br><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;note default&quot;&gt;&lt;p&gt;default&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note primary&quot;&gt;&lt;p&gt;primary&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note success&quot;&gt;&lt;p&gt;success&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note info&quot;&gt;&lt;p&gt;info&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note warning&quot;&gt;&lt;p&gt;warning&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note danger&quot;&gt;&lt;p&gt;danger&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;note default no-icon&quot;&gt;&lt;p&gt;danger no-icon&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>预览</strong></p>
<p>default</p>
<p>primary</p>
<p>success</p>
<p>info</p>
<p>warning</p>
<p>danger</p>
<p>danger no-icon</p>
<h1 id="Label标签"><a href="#Label标签" class="headerlink" title="Label标签"></a>Label标签</h1><p>在<code>@</code>前调整label的风格，<code>@</code>后输入显示的内容<br><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label default@这是default %&#125;</span><br><span class="line">&#123;% label primary@这是primary %&#125;</span><br><span class="line">&#123;% label success@这是success %&#125;</span><br><span class="line">&#123;% label info@这是info %&#125;</span><br><span class="line">&#123;% label warning@这是warning %&#125;</span><br><span class="line">&#123;% label danger@这是danger %&#125;</span><br></pre></td></tr></table></figure>

<p>**预览</p>
<p>这是default 这是primary 这是success 这是info 这是warning 这是danger</p>
<h1 id="Tab-tag选项卡"><a href="#Tab-tag选项卡" class="headerlink" title="Tab tag选项卡"></a>Tab tag选项卡</h1><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>在Next主题文件中搜索<code>Tabs tag</code>，然后将<code>enable</code>设置为<code>true</code>，下面是我的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Tabs tag</span><br><span class="line">tabs:</span><br><span class="line">  enable: true</span><br><span class="line">  transition:</span><br><span class="line">    tabs: true</span><br><span class="line">    labels: true</span><br><span class="line">  border_radius: 0</span><br></pre></td></tr></table></figure>

<h2 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h2><p>自定义的选项较多<br><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs First unique name %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>预览</strong></p>
<ul>
<li><a href="https://siriusq.top/Markdown写作语法.html#first-unique-name-1" target="_blank" rel="noopener">First unique name 1</a></li>
<li><a href="https://siriusq.top/Markdown写作语法.html#first-unique-name-2" target="_blank" rel="noopener">First unique name 2</a></li>
<li><a href="https://siriusq.top/Markdown写作语法.html#first-unique-name-3" target="_blank" rel="noopener">First unique name 3</a></li>
</ul>
<p><strong>This is Tab 1.</strong></p>
<p><strong>示例</strong><br>第一行的数字3表示默认显示的Tabs,设置为-1时表示不显示默认Tabs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Second unique name, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>预览</strong></p>
<ul>
<li><a href="https://siriusq.top/Markdown写作语法.html#second-unique-name-1" target="_blank" rel="noopener">Second unique name 1</a></li>
<li><a href="https://siriusq.top/Markdown写作语法.html#second-unique-name-2" target="_blank" rel="noopener">Second unique name 2</a></li>
<li><a href="https://siriusq.top/Markdown写作语法.html#second-unique-name-3" target="_blank" rel="noopener">Second unique name 3</a></li>
</ul>
<p><strong>This is Tab 3.</strong></p>
<p><strong>示例</strong><br>选项的名称和图标可以自定义，在``中调整</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Third unique name %&#125;</span><br><span class="line">&lt;!-- tab Solution 1@text-width --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab Solution 2@amazon --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab Solution 3@bold --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>预览</strong></p>
<ul>
<li><a href="https://siriusq.top/Markdown写作语法.html#third-unique-name-1" target="_blank" rel="noopener">Solution 1</a></li>
<li><a href="https://siriusq.top/Markdown写作语法.html#third-unique-name-2" target="_blank" rel="noopener">Solution 2</a></li>
<li><a href="https://siriusq.top/Markdown写作语法.html#third-unique-name-3" target="_blank" rel="noopener">Solution 3</a></li>
</ul>
<p><strong>This is Tab 1.</strong></p>
<h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><p><strong>示例</strong><br>使用<code>button</code>或者<code>btn</code>，在两者后面加入要跳转的链接，不加链接的话默认跳转到当前页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;只显示文字，Text是文字内容</span><br><span class="line">&#123;% button https:&#x2F;&#x2F;siriusq.top&#x2F;, 主页 %&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;多个按钮并列</span><br><span class="line">&#123;% btn https:&#x2F;&#x2F;siriusq.top&#x2F;, 主页 %&#125; &#123;% btn #, Text &amp; Title,, Title %&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;只显示图标</span><br><span class="line">&lt;p&gt;&#123;% btn https:&#x2F;&#x2F;siriusq.top&#x2F;,, home fa-5x %&#125;</span><br><span class="line">&#123;% btn #,, home fa-4x %&#125;</span><br><span class="line">&#123;% btn #,, home fa-3x %&#125;&#123;% btn #,, home fa-2x %&#125;&#123;% btn #,, home fa-lg %&#125;&#123;% btn #,, home %&#125;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;显示文字和图标</span><br><span class="line">&lt;p&gt;&#123;% btn #, Text &amp; Icon (buggy), home %&#125;</span><br><span class="line">&#123;% btn #, Text &amp; Icon (fixed width), home fa-fw %&#125;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p><strong>预览</strong><br>只显示文字</p>
<p><a href="https://siriusq.top/" target="_blank" rel="noopener">主页</a></p>
<p>多个按钮并列</p>
<p><a href="https://siriusq.top/" target="_blank" rel="noopener">主页</a> <a href="https://siriusq.top/Markdown写作语法.html#" target="_blank" rel="noopener">Text &amp; Title</a></p>
<p>只显示图标</p>
<p>显示文字和图标</p>
<p><a href="https://siriusq.top/Markdown写作语法.html#" target="_blank" rel="noopener">Text &amp; Icon (buggy)</a> <a href="https://siriusq.top/Markdown写作语法.html#" target="_blank" rel="noopener">Text &amp; Icon (fixed width)</a></p>
<h1 id="插入音乐-视频"><a href="#插入音乐-视频" class="headerlink" title="插入音乐/视频"></a>插入音乐/视频</h1><p>因为Github Page提供的空间有限，音乐和视频建议上传到B站或Youtube等平台，通过Html语言嵌入，直接复制网页提供的分享链接即可，使用<code>width</code>设置宽度，<code>height</code>设置高度</p>
<h2 id="标签"><a href="#标签" class="headerlink" title="``标签"></a>``标签</h2><p>使用<code>source src</code>设置视频路径<br><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;video width&#x3D;&quot;480&quot; height&#x3D;&quot;320&quot; controls&gt;</span><br><span class="line">&lt;source src&#x3D;&quot;movie.mp4&quot;&gt;</span><br><span class="line">&lt;&#x2F;video&gt;</span><br></pre></td></tr></table></figure>

<p><strong>预览（并没有视频）</strong></p>
<h2 id="标签-1"><a href="#标签-1" class="headerlink" title="``标签"></a>``标签</h2><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;embed src&#x3D;&#39;http:&#x2F;&#x2F;player.youku.com&#x2F;player.php&#x2F;sid&#x2F;XMzUzNjg1OTQzNg&#x3D;&#x3D;&#x2F;v.swf&#39; allowFullScreen&#x3D;&#39;true&#39; quality&#x3D;&#39;high&#39; width&#x3D;&#39;480&#39; height&#x3D;&#39;400&#39; align&#x3D;&#39;middle&#39; allowScriptAccess&#x3D;&#39;always&#39; type&#x3D;&#39;application&#x2F;x-shockwave-flash&#39;&gt;&lt;&#x2F;embed&gt;</span><br></pre></td></tr></table></figure>

<p><strong>预览（随便放的）</strong></p>
<h2 id="标签-2"><a href="#标签-2" class="headerlink" title="``标签"></a>``标签</h2><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe height&#x3D;400 width&#x3D;600 src&#x3D;&quot;&#x2F;&#x2F;player.bilibili.com&#x2F;player.html?aid&#x3D;14176961&amp;cid&#x3D;23141262&amp;page&#x3D;1&quot; scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot;&gt; &lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure>

<p><strong>预览（自己的B站软广）</strong></p>
<iframe height="400" width="600" src="https://player.bilibili.com/player.html?aid=14176961&amp;cid=23141262&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="display: block; margin: 0px; max-width: 100%; height: 498.65625px; left: 0px; position: absolute; top: 0px; width: 748px;"></iframe>

<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><h2 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下"></a>步骤如下</h2><ul>
<li><p>安装图片插件</p>
<ul>
<li>在博客根目录中运行Git bash</li>
<li>输入命令<code>npm install hexo-asset-image</code>等待安装完成</li>
</ul>
</li>
<li><p>修改配置文件</p>
<ul>
<li>打开博客根目录的<code>_config.yml</code></li>
<li>搜索<code>psot_asset_folder</code>并将其设置为<code>true</code></li>
</ul>
</li>
<li><p>使用方法</p>
<ul>
<li><p>使用命令<code>hexo new &quot;title&quot;</code>创建新博文时会生成一个同名文件夹</p>
</li>
<li><p>将要插入的图片放入同名文件夹中</p>
</li>
<li><p>使用markdown格式引入图片，下面三种都可以,最后一种可以通过后面的数字控制大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![替代文字](博客标题&#x2F;图片名.JPG)</span><br><span class="line">![替代文字](&#x2F;博客标题&#x2F;图片名.JPG)</span><br><span class="line">&#123;% img full-image &#x2F;博客标题&#x2F;图片名.JPG 180 180 图片名 %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>hexo s</code>即可本地查看效果</p>
</li>
</ul>
</li>
</ul>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![替代文字](Markdown写作语法&#x2F;201904133.JPG)</span><br><span class="line">![替代文字](&#x2F;Markdown写作语法&#x2F;201904133.JPG)</span><br><span class="line">&#123;% img full-image &#x2F;Markdown写作语法&#x2F;201904133.JPG 180 180 图片名 %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>预览</strong></p>
<p><img src="https://siriusq.top/Markdown%E5%86%99%E4%BD%9C%E8%AF%AD%E6%B3%95/201904133.JPG" alt="替代文字"><br><img src="https://siriusq.top/Markdown%E5%86%99%E4%BD%9C%E8%AF%AD%E6%B3%95/201904133.JPG" alt="替代文字"></p>
<p><img src="https://siriusq.top/Markdown%E5%86%99%E4%BD%9C%E8%AF%AD%E6%B3%95/201904133.JPG" alt="图片名"></p>
<h2 id="一点微小的工作"><a href="#一点微小的工作" class="headerlink" title="一点微小的工作"></a>一点微小的工作</h2><p>Next主题默认会在图片四周生成一圈灰色边框影响美观，对此需要修改<code>博客目录\themes\next\source\css\_common\components\post</code>中的<code>post-expand.styl</code>文件。<br>在文件中搜索<code>img</code>，并将其修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">img &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    margin: 0 auto 25px;</span><br><span class="line">    padding: 3px;</span><br><span class="line">    border: none;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>重新部署后灰色边框就会消失</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>图片后缀大小写要匹配</p>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>在文字前加<code>#</code>和空格，支持六级标题和大小标题，一定不要漏了 <strong>空格</strong>，空格漏掉的话会和普通字符一样显示</p>
<p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line"></span><br><span class="line">大标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">小标题</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><strong>预览效果</strong></p>
<p>就不预览了，太难看了qaq</p>
<h1 id="数学公式使用"><a href="#数学公式使用" class="headerlink" title="数学公式使用"></a>数学公式使用</h1><p>转载自<a href="https://jzqt.github.io/2015/06/30/Markdown中写数学公式/" target="_blank" rel="noopener">剑紫青天</a></p>
<p>一些扩展的<code>Markdown</code>语法支持采用<code>LaTex</code>语法写数学公式，而在网页中使用<code>Mathjax</code>插件来显示数学公式。</p>
<p>本教程介绍<strong>如何在Markdown中书写数学公式</strong>。</p>
<h2 id="插入数学公式"><a href="#插入数学公式" class="headerlink" title="插入数学公式"></a>插入数学公式</h2><p>在Markdown中插入数学公式的语法是<code>$数学公式$</code>和<code>$$数学公式$$</code>。</p>
<p><strong>行内公式</strong>是可以让公式在文中与文字或其他东西混编，不独占一行。</p>
<ul>
<li><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">质能方程$E &#x3D; mc^2$</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>显示</strong></p>
<blockquote>
<p>质能方程$E = mc^2$</p>
</blockquote>
</li>
</ul>
<p><strong>独立公式</strong>使公式单独占一行，不与文中其他文字等混编。</p>
<ul>
<li><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">质能方程$$E &#x3D; mc^2$$</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>显示</strong></p>
<blockquote>
<p>质能方程$$E = mc^2$$</p>
</blockquote>
</li>
</ul>
<h2 id="普通公式"><a href="#普通公式" class="headerlink" title="普通公式"></a>普通公式</h2><p>普通的加减乘除数学公式的输入方法与平常的书写一样。</p>
<ul>
<li><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$x &#x3D; 100 * y + z - 10 &#x2F; 33 + 10 % 3$$</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>显示</strong></p>
<blockquote>
<p>$$x = 100 * y + z - 10 / 33 + 10 % 3$$</p>
</blockquote>
</li>
</ul>
<h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><p>使用<code>^</code>来表示上标，<code>_</code>来表示下标，同时如果上下标的内容多于一个字符，可以使用<code>{}</code>来将这些内容括起来当做一个整体。<br>与此同时，上下标是可以嵌套的。</p>
<ul>
<li><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$x &#x3D; a_&#123;1&#125;^n + a_&#123;2&#125;^n + a_&#123;3&#125;^n$$</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>显示</strong></p>
<blockquote>
<p>$$x = a_{1}^n + a_{2}^n + a_{3}^n$$</p>
</blockquote>
</li>
</ul>
<p>如果希望左右两边都能有上下标，可以使用<code>\sideset</code>语法</p>
<ul>
<li><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$\sideset&#123;^1_2&#125;&#123;^3_4&#125;A$$</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>显示</strong></p>
<blockquote>
<p>$$\sideset{^1_2}{^3_4}A$$</p>
</blockquote>
</li>
</ul>
<h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p><code>()</code>，<code>[]</code>和<code>|</code>都表示它们自己，但是<code>{}</code>因为有特殊作用因此当需要显示大括号时一般使用<code>\lbrace \rbrace</code>来表示。</p>
<ul>
<li><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$f(x, y) &#x3D; 100 * \lbrace[(x + y) * 3] - 5\rbrace$$</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>显示</strong></p>
<blockquote>
<p>$$f(x, y) = 100 * \lbrace[(x + y) * 3] - 5\rbrace$$</p>
</blockquote>
</li>
</ul>
<h2 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h2><p>分数使用<code>\frac{分母}{分子}</code>这样的语法，不过推荐使用<code>\cfrac</code>来代替<code>\frac</code>，显示公式不会太挤。</p>
<ul>
<li><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$\frac&#123;1&#125;&#123;3&#125; 与 \cfrac&#123;1&#125;&#123;3&#125;$$</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>显示</strong></p>
<blockquote>
<p>$$\frac{1}{3} 与 \cfrac{1}{3}$$</p>
</blockquote>
</li>
</ul>
<h2 id="开方"><a href="#开方" class="headerlink" title="开方"></a>开方</h2><p>开方使用<code>\sqrt[次数]{被开方数}</code>这样的语法</p>
<ul>
<li><p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$\sqrt[3]&#123;X&#125;$$</span><br><span class="line">$$\sqrt&#123;5 - x&#125;$$</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>显示</strong></p>
<blockquote>
<p>$$\sqrt[3]{X}$$<br>$$\sqrt{5 - x}$$</p>
</blockquote>
</li>
</ul>
<h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><p>见下表</p>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">大写</th>
<th align="center">代码</th>
<th align="center">小写</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>A</code></td>
<td align="center">$A$</td>
<td align="center"><code>\alpha</code></td>
<td align="center">$\alpha$</td>
</tr>
<tr>
<td align="center"><code>B</code></td>
<td align="center">$B$</td>
<td align="center"><code>\beta</code></td>
<td align="center">$\beta$</td>
</tr>
<tr>
<td align="center"><code>\Gamma</code></td>
<td align="center">$\Gamma$</td>
<td align="center"><code>\gamma</code></td>
<td align="center">$\gamma$</td>
</tr>
<tr>
<td align="center"><code>\Delta</code></td>
<td align="center">$\Delta$</td>
<td align="center"><code>\delta</code></td>
<td align="center">$\delta$</td>
</tr>
<tr>
<td align="center"><code>E</code></td>
<td align="center">$E$</td>
<td align="center"><code>\epsilon</code></td>
<td align="center">$\epsilon$</td>
</tr>
<tr>
<td align="center"><code>Z</code></td>
<td align="center">$Z$</td>
<td align="center"><code>\zeta</code></td>
<td align="center">$\zeta$</td>
</tr>
<tr>
<td align="center"><code>H</code></td>
<td align="center">$H$</td>
<td align="center"><code>\eta</code></td>
<td align="center">$\eta$</td>
</tr>
<tr>
<td align="center"><code>\Theta</code></td>
<td align="center">$\Theta$</td>
<td align="center"><code>\theta</code></td>
<td align="center">$\theta$</td>
</tr>
<tr>
<td align="center"><code>I</code></td>
<td align="center">$I$</td>
<td align="center"><code>\iota</code></td>
<td align="center">$\iota$</td>
</tr>
<tr>
<td align="center"><code>K</code></td>
<td align="center">$K$</td>
<td align="center"><code>\kappa</code></td>
<td align="center">$\kappa$</td>
</tr>
<tr>
<td align="center"><code>\Lambda</code></td>
<td align="center">$\Lambda$</td>
<td align="center"><code>\lambda</code></td>
<td align="center">$\lambda$</td>
</tr>
<tr>
<td align="center"><code>M</code></td>
<td align="center">$M$</td>
<td align="center"><code>\mu</code></td>
<td align="center">$\mu$</td>
</tr>
<tr>
<td align="center"><code>N</code></td>
<td align="center">$N$</td>
<td align="center"><code>\nu</code></td>
<td align="center">$\nu$</td>
</tr>
<tr>
<td align="center"><code>\Xi</code></td>
<td align="center">$\Xi$</td>
<td align="center"><code>\xi</code></td>
<td align="center">$\xi$</td>
</tr>
<tr>
<td align="center"><code>O</code></td>
<td align="center">$O$</td>
<td align="center"><code>\omicron</code></td>
<td align="center">$\omicron$</td>
</tr>
<tr>
<td align="center"><code>\Pi</code></td>
<td align="center">$\Pi$</td>
<td align="center"><code>\pi</code></td>
<td align="center">$\pi$</td>
</tr>
<tr>
<td align="center"><code>P</code></td>
<td align="center">$P$</td>
<td align="center"><code>\rho</code></td>
<td align="center">$\rho$</td>
</tr>
<tr>
<td align="center"><code>\Sigma</code></td>
<td align="center">$\Sigma$</td>
<td align="center"><code>\sigma</code></td>
<td align="center">$\sigma$</td>
</tr>
<tr>
<td align="center"><code>T</code></td>
<td align="center">$T$</td>
<td align="center"><code>\tau</code></td>
<td align="center">$\tau$</td>
</tr>
<tr>
<td align="center"><code>\Upsilon</code></td>
<td align="center">$\Upsilon$</td>
<td align="center"><code>\upsilon</code></td>
<td align="center">$\upsilon$</td>
</tr>
<tr>
<td align="center"><code>\Phi</code></td>
<td align="center">$\Phi$</td>
<td align="center"><code>\phi</code></td>
<td align="center">$\phi$</td>
</tr>
<tr>
<td align="center"><code>X</code></td>
<td align="center">$X$</td>
<td align="center"><code>\chi</code></td>
<td align="center">$\chi$</td>
</tr>
<tr>
<td align="center"><code>\Psi</code></td>
<td align="center">$\Psi$</td>
<td align="center"><code>\psi</code></td>
<td align="center">$\psi$</td>
</tr>
<tr>
<td align="center"><code>\Omega</code></td>
<td align="center">$\Omega$</td>
<td align="center"><code>\omega</code></td>
<td align="center">$\omega$</td>
</tr>
</tbody></table>
<h2 id="其他字符"><a href="#其他字符" class="headerlink" title="其他字符"></a>其他字符</h2><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="left">代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\pm$</td>
<td align="left"><code>\pm</code></td>
</tr>
<tr>
<td align="center">$\times$</td>
<td align="left"><code>\times</code></td>
</tr>
<tr>
<td align="center">$\div$</td>
<td align="left"><code>\div</code></td>
</tr>
<tr>
<td align="center">$\mid$</td>
<td align="left"><code>\mid</code></td>
</tr>
<tr>
<td align="center">$\nmid$</td>
<td align="left"><code>\nmid</code></td>
</tr>
<tr>
<td align="center">$\cdot$</td>
<td align="left"><code>\cdot</code></td>
</tr>
<tr>
<td align="center">$\circ$</td>
<td align="left"><code>\circ</code></td>
</tr>
<tr>
<td align="center">$\ast$</td>
<td align="left"><code>\ast</code></td>
</tr>
<tr>
<td align="center">$\bigodot$</td>
<td align="left"><code>\bigodot</code></td>
</tr>
<tr>
<td align="center">$\bigotimes$</td>
<td align="left"><code>\bigotimes</code></td>
</tr>
<tr>
<td align="center">$\bigoplus$</td>
<td align="left"><code>\bigoplus</code></td>
</tr>
<tr>
<td align="center">$\leq$</td>
<td align="left"><code>\leq</code></td>
</tr>
<tr>
<td align="center">$\geq$</td>
<td align="left"><code>\geq</code></td>
</tr>
<tr>
<td align="center">$\neq$</td>
<td align="left"><code>\neq</code></td>
</tr>
<tr>
<td align="center">$\approx$</td>
<td align="left"><code>\approx</code></td>
</tr>
<tr>
<td align="center">$\equiv$</td>
<td align="left"><code>\equiv</code></td>
</tr>
<tr>
<td align="center">$\sum$</td>
<td align="left"><code>\sum</code></td>
</tr>
<tr>
<td align="center">$\prod$</td>
<td align="left"><code>\prod</code></td>
</tr>
<tr>
<td align="center">$\coprod$</td>
<td align="left"><code>\coprod</code></td>
</tr>
</tbody></table>
<h3 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="left">代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\emptyset$</td>
<td align="left"><code>\emptyset</code></td>
</tr>
<tr>
<td align="center">$\in$</td>
<td align="left"><code>\in</code></td>
</tr>
<tr>
<td align="center">$\notin$</td>
<td align="left"><code>\notin</code></td>
</tr>
<tr>
<td align="center">$\subset$</td>
<td align="left"><code>\subset</code></td>
</tr>
<tr>
<td align="center">$\supset$</td>
<td align="left"><code>\supset</code></td>
</tr>
<tr>
<td align="center">$\subseteq$</td>
<td align="left"><code>\subseteq</code></td>
</tr>
<tr>
<td align="center">$\supseteq$</td>
<td align="left"><code>\supseteq</code></td>
</tr>
<tr>
<td align="center">$\bigcap$</td>
<td align="left"><code>\bigcap</code></td>
</tr>
<tr>
<td align="center">$\bigcup$</td>
<td align="left"><code>\bigcup</code></td>
</tr>
<tr>
<td align="center">$\bigvee$</td>
<td align="left"><code>\bigvee</code></td>
</tr>
<tr>
<td align="center">$\bigwedge$</td>
<td align="left"><code>\bigwedge</code></td>
</tr>
<tr>
<td align="center">$\biguplus$</td>
<td align="left"><code>\biguplus</code></td>
</tr>
<tr>
<td align="center">$\bigsqcup$</td>
<td align="left"><code>\bigsqcup</code></td>
</tr>
</tbody></table>
<h3 id="对数运算符"><a href="#对数运算符" class="headerlink" title="对数运算符"></a>对数运算符</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="left">代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\log$</td>
<td align="left"><code>\log</code></td>
</tr>
<tr>
<td align="center">$\lg$</td>
<td align="left"><code>\lg</code></td>
</tr>
<tr>
<td align="center">$\ln$</td>
<td align="left"><code>\ln</code></td>
</tr>
</tbody></table>
<h3 id="三角运算符"><a href="#三角运算符" class="headerlink" title="三角运算符"></a>三角运算符</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="left">代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\bot$</td>
<td align="left"><code>\bot</code></td>
</tr>
<tr>
<td align="center">$\angle$</td>
<td align="left"><code>\angle</code></td>
</tr>
<tr>
<td align="center">$\sin$</td>
<td align="left"><code>\sin</code></td>
</tr>
<tr>
<td align="center">$\cos$</td>
<td align="left"><code>\cos</code></td>
</tr>
<tr>
<td align="center">$\tan$</td>
<td align="left"><code>\tan</code></td>
</tr>
<tr>
<td align="center">$\cot$</td>
<td align="left"><code>\cot</code></td>
</tr>
<tr>
<td align="center">$\sec$</td>
<td align="left"><code>\sec</code></td>
</tr>
<tr>
<td align="center">$\csc$</td>
<td align="left"><code>\csc</code></td>
</tr>
</tbody></table>
<h3 id="微积分运算符"><a href="#微积分运算符" class="headerlink" title="微积分运算符"></a>微积分运算符</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="left">代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\prime$</td>
<td align="left"><code>\prime</code></td>
</tr>
<tr>
<td align="center">$\int$</td>
<td align="left"><code>\int</code></td>
</tr>
<tr>
<td align="center">$\iint$</td>
<td align="left"><code>\iint</code></td>
</tr>
<tr>
<td align="center">$\iiint$</td>
<td align="left"><code>\iiint</code></td>
</tr>
<tr>
<td align="center">$\iiiint$</td>
<td align="left"><code>\iiiint</code></td>
</tr>
<tr>
<td align="center">$\oint$</td>
<td align="left"><code>\oint</code></td>
</tr>
<tr>
<td align="center">$\lim$</td>
<td align="left"><code>\lim</code></td>
</tr>
<tr>
<td align="center">$\infty$</td>
<td align="left"><code>\infty</code></td>
</tr>
<tr>
<td align="center">$\nabla$</td>
<td align="left"><code>\nabla</code></td>
</tr>
<tr>
<td align="center">$\mathrm{d}$</td>
<td align="left"><code>\mathrm{d}</code></td>
</tr>
</tbody></table>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>感觉还是挂在自己博客上比较好看（手动狗头），还是建议大家去看原帖，侵权删除。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>尽管我们的手中一无所有——美国留学告别篇</title>
    <url>/Blogs/2020/03/21/American-Memory/</url>
    <content><![CDATA[<h2 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h2><p>​        关于记忆，我一直都很欣赏刘慈欣在三体里说的话：过去就像攥在手中的一把干沙，自以为攥得很紧，其实早就从指缝中流光了。这就是为什么会有回忆录，总要有一些东西来帮助人们记住一些重要的时刻，特别是对我来说，这重要的时刻竟然有接近一年之长。去年8月我离开成都来到Pasadena求学，今年三月因为Coronavirus回国，历时7个月（手动狗头好像和一年有些差距qaq）。不管怎样，我走得之匆忙甚至没空与朋友们好好告别，不过好在我走前搭建好了博客，还能写篇博客留给大家看看（还得写英语qaq）。</p>
<iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/us/album/bokuranoteniha-nanimonaikedo/1204763777?i=1204764497"></iframe>

<p>从前，少年有一个美国梦</p>
<p>于是少年登上飞机，来到了这个陌生的国土，当少年下飞机的时候。。。</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGoby6.png" alt=""></p>
<p>（误）</p>
<p>出国学习当然是为了日后回国帮助祖国进行建设，<strong>师夷长技以制夷</strong></p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGoho4.jpg" alt=""></p>
<p>其实去年八月我并不是第一次来美国（是前年第一次），所以并没有给我太多新鲜感，除了对即将开学感到激动与新奇，其他就没什么了，很多国内的朋友都不知道pasadena，所以我就给他们说我在Los Angeles。。。qaq    </p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGUGgx.jpg" alt=""></p>
<p>实际上在Pasadena，其实也没差啦 &gt; 。&lt;</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGo0oQ.jpg" alt=""></p>
<h2 id="照片集"><a href="#照片集" class="headerlink" title="照片集"></a>照片集</h2><p>当我走近学校的时候，草（中日双语），学校还能这么搞</p>
<p>我们有神奇的mol鬼计算机老师Lartuno</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGoUL8.jpg" alt=""></p>
<p>我们还有更加神奇的英语老V</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGoWeU.jpg" alt=""></p>
<p>老师都比较和蔼<del>可亲</del>,学校则更加<del>随意</del></p>
<p>学校的party</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGosWn.jpg" alt=""></p>
<p>Football 比赛</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGUiNj.jpg" alt=""></p>
<p>Cross country的teamdinner</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGozYd.jpg" alt=""></p>
<p>Science bowl</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGUUbD.jpg" alt=""></p>
<p>Soccer game</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGTiOf.gif" alt=""></p>
<p>在这里才真的是德智体美劳全面发展（误），猛的想起在中国社会实践扫大街的<del>光辉岁月</del>。 </p>
<h2 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h2><h3 id="炸裂的开局"><a href="#炸裂的开局" class="headerlink" title="炸裂的开局"></a>炸裂的开局</h3><p>来到这边是十升十，语言上应该是全校最差的，特别是我在国内小学英语课跟老师对线，十年级还不是国际学校，</p>
<p>“我不知道你有多聪明，因为你的英语听起来像是这边小学生，就像我的中文在你家人面前一样，他们觉得我很傻（逃）”这是我姐夫（米国人）对我说的原话</p>
<p>于是我能怎么办？</p>
<p>只有molmol自闭然后苦练英语鸭。。。</p>
<p>英语练不下去了只有用<strong>脸皮</strong>与别人交流</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGaSR1.jpg" alt=""></p>
<p>还好这边数学还有科学极其简单（结果还是拿了A- ≧︿≦），所以还能支撑</p>
<p>但是我还是太年轻了，开学几天晚交的作业数不胜数，于是这些作业都只有50%</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGogyV.jpg" alt=""></p>
<p>到了后来才知道作业还有quiz这类东西的重要性。还有学校Announcement的事情要记清，大部分时候我没听清楚就给自己带来了很多麻烦</p>
<h3 id="稳定的中场"><a href="#稳定的中场" class="headerlink" title="稳定的中场"></a>稳定的中场</h3><p>在适应学校生活之后感觉瞬间轻松很多了，就开始参加各种课外活动，不得不说美国的课外活动是真的<strong>丰富多彩</strong>，而且都包含在学费里面（不去参加感觉<strong>学费多交</strong>了一半）</p>
<p>好像开头就把图片放完了qaq（这跟开头丢一个王炸有什么区别啊喂）</p>
<p>没事我可以展开说</p>
<p>我在中国就喜欢踢球，但是美国这边运动是看赛季。。。</p>
<p>开学的时候赛季就只有橄榄球和Cross country</p>
<p>所以我先参加了<strong>cross country</strong></p>
<p>说白了就是长跑，就是好奇为什么这个不叫cross countryside</p>
<p>因为我们都是在<strong>countryside</strong>跑步,没有一次有机会在城里面跑（逃</p>
<p>（图是女var比赛</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGo3id.gif" alt=""></p>
<p>幸好我从初三开始因为^%^&amp;**% 开始了自己的跑步减肥之旅，所以运气很好地进了varsity</p>
<p>（Varsity可以理解为中国的一队，与之相对的JV相当于是二队）</p>
<p>在cross country中也结交了一帮好友，Jonathan, Joshua, James, Yuming, Daniel, David, Liana…..</p>
<p>排名不分先后</p>
<p>我们这一届的Cross country在我与几个沙雕的带领下</p>
<p>日常跑步大概是这样</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGodeS.jpg" alt=""></p>
<p>还有这里第一次参赛</p>
<p>感觉没有长发的自己太淦了qaq</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGUF4s.jpg" alt=""></p>
<p>这个长跑一次比赛要求跑 3 miles，相当于5 km，真是对<strong>意志♂</strong>的考验</p>
<p>看得出来我的意志♂还不错</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGUJv6.jpg" alt=""></p>
<p>（Rookie of the year也就是年度最佳新人）</p>
<p>说好的德智体美劳</p>
<p>我到美国来还是要搞搞竞赛</p>
<p>我在国内水NOIP，来这边就水USACO吧。。。</p>
<p>结果我这个铁憨憨把比赛日期给错过了qaq</p>
<p>于是我在Math club里面和另外三个华裔把学校<strong>AMC10</strong>（美国数学奥林匹克竞赛）的<strong>前三</strong>给占完了。。。</p>
<p>顺便再参加一手<strong>Science bowl</strong></p>
<p>不亏</p>
<p>然后继续搞体育</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGoIY9.png" alt=""></p>
<p>心心恋恋的足球赛季终于开始了</p>
<p>教练看我比较溴，觉得JV需要我这种人才</p>
<p>来到JV，我吃苦耐劳,永争<strong>一</strong>流</p>
<p>创建了队史上多个第一第二</p>
<p>队内第一个助攻</p>
<p>队内第二个进球</p>
<p>队内第一张<strong>黄牌</strong></p>
<p>队内第二张<strong>黄牌</strong></p>
<p>别的不说，光黄牌我就给了教练两张</p>
<p>教练：</p>
<p>在我的执教生涯中，你是我遇到的唯一一个以一己之力给将我罚下的球员，我教练愿称你为最强！</p>
<p>并表示下学年一定送我去Varsity，他不敢再执教我了</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGooWR.gif" alt=""></p>
<p>（注：为什么我犯规教练拿到黄牌是因为着装问题是罚教练</p>
<p>我一次没带护腿板，一次带了手表参赛）</p>
<p>虽然作为球队最强。。。</p>
<p>的中国人（逃），但是我并不寂寞</p>
<p>毕竟还有一群傻屌的小伙汁</p>
<p>高糊画质</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGUXa4.jpg" alt=""></p>
<p>在队里我学到了团队合作（不合作队友不传球qaq）</p>
<p>这也是为什么我有队里接近50%的助攻</p>
<p>学会了与队友合作，也见证了球队从被别人打成5:0到把别人打成8:2的转变</p>
<p>其中的很多细节现在回想也依旧能<strong>笑出猪叫</strong></p>
<p><strong>包括但不限于</strong></p>
<p>边后卫精准传中（给对面），中后卫大脚解围<strong>痛击我的队友</strong>，中卫空中<strong>暴扣</strong>足球（记住这是足球比赛），前锋失球疯狂自虐。。。。</p>
<p>为什么没有边锋？</p>
<p>因为<strong>边疯</strong>是我啊哈哈哈哈哈哈哈</p>
<p>明年还想继续快乐足球</p>
<p>PS.美国的球场真特么好，是真草球场</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGojTe.jpg" alt=""></p>
<p>只可惜再也没有明年了。。。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>因为我实在太菜了，GPA（<strong>grade point average</strong>）只有4.29</p>
<p>然后也没搞出什么好点的项目</p>
<p>再加上coronavirus的影响</p>
<p>被迫结束了自己为期7个月的留学生活</p>
<p>不得不说留学生活还是听充实的</p>
<p>搞了搞数竞，计算机也有所精进</p>
<p>比如搞了这个博客</p>
<p>还有python爬虫的<a href="https://mavericreate.top/Blogs/2020/02/23/爬取进击的巨人漫画/" target="_blank" rel="noopener">实践</a>，在走之前还搞了搞3D建模</p>
<p>本来打出来想送给国内朋友的结果学校关了不能用3D打印机qaq</p>
<p>Laser cutting</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGolIH.jpg" alt=""></p>
<p>3D建模</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGo2LT.png" alt=""></p>
<p>总的来说</p>
<p>在这里自己动手实践的机会很多</p>
<p>同学们和老师都很友好</p>
<p>但是U一S一</p>
<p>课程太简单以及学校老师的教法参差不齐也是值得诟病的地方</p>
<p>还是回国老老实实地做一个理科狗吧</p>
<p>最后还是要感谢我姐还有姐夫在美国对我的照顾</p>
<p>朋友们的关照</p>
<p>还有家人对我的关爱</p>
<p>当然还有</p>
<p>主子。。。</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGofwF.jpg" alt=""></p>
<p>都看到这了，确定不<strong>打赏</strong>一波吗？</p>
<p>我回国一定要把没喝的奶茶补回来！！！</p>
<p>算了再放一张福利吧</p>
<p>来张初二与现在的对比</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGUubF.jpg" alt=""></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取进击的巨人漫画</title>
    <url>/Blogs/2020/02/24/Crawl-Attack-on%20t-titan/</url>
    <content><![CDATA[<h1 id="使用Scrapy爬取进击的巨人漫画"><a href="#使用Scrapy爬取进击的巨人漫画" class="headerlink" title="使用Scrapy爬取进击的巨人漫画"></a>使用Scrapy爬取进击的巨人漫画</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>​        自己看到网上有两个大牛分别爬取了<strong>合法</strong>(Naruto)与<strong>非法</strong>(<del>你懂的</del>)的漫画，十分感叹，便也想借鉴借鉴，结果大牛的的代码在博主的电脑上运行不了(<del>丧尽天良</del>),所以就只有自己写了一个算是结合版的代码，爬取了这个<a href="https://www.fzdm.com/" target="_blank" rel="noopener">网站</a>。在此分享给大家，授人以both🐟。</p>
<p>​        代码已经挂在GitHub上面了，想下漫画的可以滑到最下面观看下载方法，这个方法不仅可以下载进击的巨人，整个网站的漫画都可以爬，建议大家别乱改我设置的延迟，爬的太快了可能会被网站锁IP。</p>
<h2 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h2><p>博主的环境如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mavericks-MacBook-Pro:~ maverick$</span><br><span class="line">Python 2.7.10 (default, Feb 22 2019, 21:55:15) </span><br><span class="line">Scrapy 1.8.0 - no active project</span><br></pre></td></tr></table></figure>

<p>在这里我默认大家都已经安装好了scrapy，<a href="https://www.osgeo.cn/scrapy/intro/install.html#intro-install" target="_blank" rel="noopener">传送门</a></p>
<p>不知道大家会遇到什么麻烦，博主只用了这一句代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install Scrapy</span><br></pre></td></tr></table></figure>

<h2 id="三、基础准备"><a href="#三、基础准备" class="headerlink" title="三、基础准备"></a>三、基础准备</h2><h3 id="Scrapy简介（大牛的文章）"><a href="#Scrapy简介（大牛的文章）" class="headerlink" title="Scrapy简介（大牛的文章）"></a>Scrapy简介（<a href="https://blog.csdn.net/c406495762/article/details/72858983" target="_blank" rel="noopener">大牛的文章</a>）</h3><pre><code>Scrapy Engine(Scrapy核心) 负责数据流在各个组件之间的流。Spiders(爬虫)发出Requests请求，经由Scrapy Engine(Scrapy核心) 交给Scheduler(调度器)，Downloader(下载器)Scheduler(调度器) 获得Requests请求，然后根据Requests请求，从网络下载数据。Downloader(下载器)的Responses响应再传递给Spiders进行分析。根据需求提取出Items，交给Item Pipeline进行下载。Spiders和Item Pipeline是需要用户根据响应的需求进行编写的。除此之外，还有两个中间件，Downloaders Mddlewares和Spider Middlewares，这两个中间件为用户提供方面，通过插入自定义代码扩展Scrapy的功能，例如去重等。</code></pre><p><img src="https://s1.ax1x.com/2020/04/02/GGY3Ct.png" alt="Scrapy"></p>
<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>注意！这篇文章并不是official文章，一切还以<a href="https://www.osgeo.cn/scrapy/intro/tutorial.html" target="_blank" rel="noopener">官方教程</a>为准。这里只讲本次操作用到的知识。</p>
<ul>
<li>创建一个Scrapy项目；</li>
<li>定义提取的Item；</li>
<li>编写爬取网站的 spider 并提取 Item；</li>
<li>利用python自带的request库莱下载漫画</li>
</ul>
<h2 id="四、第二次准备"><a href="#四、第二次准备" class="headerlink" title="四、第二次准备"></a>四、第二次准备</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy startproject Titan</span><br></pre></td></tr></table></figure>

<p>然后我们可以观察项目内涉及的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|____Titan</span><br><span class="line">| |____.DS_Store</span><br><span class="line">| |____scrapy.cfg</span><br><span class="line">| |____Titan</span><br><span class="line">| | |____.DS_Store</span><br><span class="line">| | |____spiders</span><br><span class="line">| | | |____titan_spider.py</span><br><span class="line">| | | |______init__.py</span><br><span class="line">| | | |______pycache__</span><br><span class="line">| | | | |______init__.cpython-38.pyc</span><br><span class="line">| | | | |____titan_spider.cpython-38.pyc</span><br><span class="line">| | | | |____titan_spider.cpython-37.pyc</span><br><span class="line">| | | | |______init__.cpython-37.pyc</span><br><span class="line">| | |______init__.py</span><br><span class="line">| | |______pycache__</span><br><span class="line">| | | |______init__.cpython-38.pyc</span><br><span class="line">| | | |____settings.cpython-38.pyc</span><br><span class="line">| | | |____settings.cpython-37.pyc</span><br><span class="line">| | | |______init__.cpython-37.pyc</span><br><span class="line">| | |____middlewares.py</span><br><span class="line">| | |____settings.py</span><br><span class="line">| | |____items.py</span><br><span class="line">| | |____pipelines.py</span><br></pre></td></tr></table></figure>

<p>大部分都没啥用，重点是我们要在spider里面添加一个自己编写的python文件，可以是任意名字，像我就叫他巨人蜘蛛</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">titan_spider.py</span><br></pre></td></tr></table></figure>

<h3 id="创建spider类"><a href="#创建spider类" class="headerlink" title="创建spider类"></a>创建spider类</h3><p>创建一个用来实现具体爬取功能的类，我们所有的处理实现都会在这个类中进行，它必须为 <code>scrapy.Spider</code> 的子类。</p>
<p>在 <code>Titan/spiders</code> 文件路径下创建 <code>titan_spider.py</code> 文件。在里面就开始我们蜘蛛（<del>只猪</del>）的初始化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#上面code是为了让其支持中文</span></span><br><span class="line"><span class="keyword">import</span> scrapy<span class="comment">#scrapy本尊</span></span><br><span class="line"><span class="keyword">import</span> re<span class="comment">#保存文件的library</span></span><br><span class="line"><span class="keyword">import</span> time<span class="comment">#设置延时</span></span><br><span class="line"><span class="keyword">import</span> requests<span class="comment">#从网络下载图片</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitanSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">	name = <span class="string">"titan"</span><span class="comment">#定义spider的名字</span></span><br><span class="line">	start_urls = [<span class="string">'https://manhua.fzdm.com/132/'</span>]<span class="comment">#起始页面</span></span><br><span class="line">	allowed_domains = [<span class="string">'https://manhua.fzdm.com'</span>,<span class="string">'http://p2.manhuapan.com/'</span>]<span class="comment">#允许范围</span></span><br><span class="line">  <span class="comment">#上面的名字都是official的名字千万别改</span></span><br></pre></td></tr></table></figure>

<h3 id="shell分析"><a href="#shell分析" class="headerlink" title="shell分析"></a>shell分析</h3><p>在command line里面输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy shell &#39;https:&#x2F;&#x2F;manhua.fzdm.com&#x2F;39&#39;</span><br></pre></td></tr></table></figure>

<p>然后你会得到这一堆东西（别🐦它）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-02-23 20:14:47 [scrapy.utils.log] INFO: Scrapy 1.8.0 started (bot: scrapybot)</span><br><span class="line">2020-02-23 20:14:47 [scrapy.utils.log] INFO: Versions: lxml 4.4.2.0, libxml2 2.9.4, cssselect 1.1.0, parsel 1.5.2, w3lib 1.21.0, Twisted 19.10.0, Python 3.8.1 (v3.8.1:1b293b6006, Dec 18 2019, 14:08:53) - [Clang 6.0 (clang-600.0.57)], pyOpenSSL 19.1.0 (OpenSSL 1.1.1d  10 Sep 2019), cryptography 2.8, Platform macOS-10.14.6-x86_64-i386-64bit</span><br><span class="line">2020-02-23 20:14:47 [scrapy.crawler] INFO: Overridden settings: &#123;&#39;DUPEFILTER_CLASS&#39;: &#39;scrapy.dupefilters.BaseDupeFilter&#39;, &#39;LOGSTATS_INTERVAL&#39;: 0&#125;</span><br><span class="line">2020-02-23 20:14:47 [scrapy.extensions.telnet] INFO: Telnet Password: e3528447494d6c3d</span><br><span class="line">2020-02-23 20:14:47 [scrapy.middleware] INFO: Enabled extensions:</span><br><span class="line">...中间省略...</span><br><span class="line">[s] Available Scrapy objects:</span><br><span class="line">[s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)</span><br><span class="line">[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x10d0cd760&gt;</span><br><span class="line">[s]   item       &#123;&#125;</span><br><span class="line">[s]   request    &lt;GET https:&#x2F;&#x2F;manhua.fzdm.com&#x2F;39&gt;</span><br><span class="line">[s]   response   &lt;200 https:&#x2F;&#x2F;manhua.fzdm.com&#x2F;39&#x2F;&#x2F;&gt;</span><br><span class="line">[s]   settings   &lt;scrapy.settings.Settings object at 0x10d0cd460&gt;</span><br><span class="line">[s]   spider     &lt;DefaultSpider &#39;default&#39; at 0x10d573400&gt;</span><br><span class="line">[s] Useful shortcuts:</span><br><span class="line">[s]   fetch(url[, redirect&#x3D;True]) Fetch URL and update local objects (by default, redirects are followed)</span><br><span class="line">[s]   fetch(req)                  Fetch a scrapy.Request and update local objects </span><br><span class="line">[s]   shelp()           Shell help (print this help)</span><br><span class="line">[s]   view(response)    View response in a browser</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>然后我们就要使用xpath或者是css去寻找指定的页面内容（<del>奥利给干它</del>）</p>
<p>博主也学习了一些时间，建议各位去康康这个<a href="https://www.jianshu.com/p/489c5d21cdc7" target="_blank" rel="noopener">教程</a>(<del>求作者给广告费恰饭</del>)</p>
<p>理清思路，现在我们要找到各话的url，通过观察发现这些url都在<a>标签下</p>
<p>观察方法：鼠标右键然后点击inspect，再点一下左上角的选择器就可以查看页面元素的所在位置了</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGNf91.png" alt="Inspect"></p>
<p>于是输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response.xpath(&#39;&#x2F;&#x2F;li&#x2F;a[1]&#x2F;@href&#39;).extract()</span><br></pre></td></tr></table></figure>

<p>获取到所有符合这种特征的herf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;li&#x2F;a[1]&#x2F;@href&#39;).extract()</span><br><span class="line">[&#39;&#x2F;&#x2F;www.fzdm.com&#39;, &#39;&#x2F;&#x2F;news.fzdm.com&#39;, &#39;&#x2F;&#x2F;manhua.fzdm.com&#39;, &#39;126&#x2F;&#39;, &#39;125&#x2F;&#39;, &#39;124&#x2F;&#39;, &#39;123&#x2F;&#39;, &#39;122&#x2F;&#39;, &#39;121&#x2F;&#39;, &#39;120&#x2F;&#39;, &#39;119&#x2F;&#39;, &#39;118&#x2F;&#39;, &#39;117&#x2F;&#39;, &#39;116&#x2F;&#39;, &#39;qc65&#x2F;&#39;, &#39;115&#x2F;&#39;, &#39;qc64&#x2F;&#39;, &#39;114&#x2F;&#39;, &#39;qc63&#x2F;&#39;, &#39;113&#x2F;&#39;, &#39;qc62&#x2F;&#39;, &#39;112&#x2F;&#39;, &#39;前传61&#x2F;&#39;, &#39;111&#x2F;&#39;, &#39;前传60&#x2F;&#39;, &#39;110&#x2F;&#39;, &#39;前传59&#x2F;&#39;, &#39;109&#x2F;&#39;, &#39;108&#x2F;&#39;, &#39;前传57&#x2F;&#39;, &#39;107&#x2F;&#39;, &#39;前传56&#x2F;&#39;, &#39;106&#x2F;&#39;, &#39;前传55&#x2F;&#39;, &#39;105&#x2F;&#39;, &#39;前传54&#x2F;&#39;, &#39;104&#x2F;&#39;, &#39;103&#x2F;&#39;, &#39;102&#x2F;&#39;, &#39;qz51&#x2F;&#39;, &#39;101&#x2F;&#39;, &#39;100&#x2F;&#39;, &#39;qz49&#x2F;&#39;, &#39;99&#x2F;&#39;, &#39;qz48&#x2F;&#39;, &#39;98&#x2F;&#39;, &#39;qz47&#x2F;&#39;, &#39;97&#x2F;&#39;, &#39;thf46&#x2F;&#39;, &#39;096&#x2F;&#39;, &#39;wp45&#x2F;&#39;, &#39;95&#x2F;&#39;, &#39;qz44&#x2F;&#39;, &#39;94&#x2F;&#39;, &#39;qz43&#x2F;&#39;, &#39;93&#x2F;&#39;, &#39;qz42&#x2F;&#39;, &#39;92&#x2F;&#39;, &#39;qz41&#x2F;&#39;, &#39;91&#x2F;&#39;, &#39;qz40&#x2F;&#39;, &#39;qz40&#x2F;&#39;, &#39;qz39&#x2F;&#39;, &#39;qz38&#x2F;&#39;, &#39;90&#x2F;&#39;, &#39;89&#x2F;&#39;, &#39;88&#x2F;&#39;, &#39;qz37&#x2F;&#39;, &#39;87&#x2F;&#39;, &#39; before-the-fall-36&#x2F;&#39;, &#39;86&#x2F;&#39;, &#39;85&#x2F;&#39;, &#39;84&#x2F;&#39;, &#39;83&#x2F;&#39;, &#39;82&#x2F;&#39;, &#39;81&#x2F;&#39;, &#39;80&#x2F;&#39;, &#39;079&#x2F;&#39;, &#39;078&#x2F;&#39;, &#39;77&#x2F;&#39;, &#39;76&#x2F;&#39;, &#39;75&#x2F;&#39;, &#39;d74&#x2F;&#39;, &#39;73&#x2F;&#39;, &#39;72&#x2F;&#39;, &#39;71&#x2F;&#39;, &#39;70&#x2F;&#39;, &#39;69&#x2F;&#39;, &#39;d68&#x2F;&#39;, &#39;67&#x2F;&#39;, &#39;66&#x2F;&#39;, &#39;dxj52&#x2F;&#39;, &#39;65&#x2F;&#39;, &#39;64&#x2F;&#39;, &#39;63&#x2F;&#39;, &#39;62&#x2F;&#39;, &#39;61&#x2F;&#39;, &#39;60&#x2F;&#39;, &#39;59&#x2F;&#39;, &#39;wc08&#x2F;&#39;, &#39;58&#x2F;&#39;, &#39;wc07&#x2F;&#39;, &#39;qc07&#x2F;&#39;, &#39;57&#x2F;&#39;, &#39;wc06&#x2F;&#39;, &#39;56&#x2F;&#39;, &#39;qc06&#x2F;&#39;, &#39;55&#x2F;&#39;, &#39;54&#x2F;&#39;, &#39;wc04&#x2F;&#39;, &#39;53&#x2F;&#39;, &#39;wc02&#x2F;&#39;, &#39;52&#x2F;&#39;, &#39;wc01&#x2F;&#39;, &#39;51&#x2F;&#39;, &#39;50&#x2F;&#39;, &#39;wc00&#x2F;&#39;, &#39;49&#x2F;&#39;, &#39;xz&#x2F;&#39;, &#39;qc01&#x2F;&#39;, &#39;48&#x2F;&#39;, &#39;fwp&#x2F;&#39;, &#39;47&#x2F;&#39;, &#39;sgp&#x2F;&#39;, &#39;46&#x2F;&#39;, &#39;45&#x2F;&#39;, &#39;44&#x2F;&#39;, &#39;fwp02&#x2F;&#39;, &#39;fwp01&#x2F;&#39;, &#39;043&#x2F;&#39;, &#39;042&#x2F;&#39;, &#39;041&#x2F;&#39;, &#39;040&#x2F;&#39;, &#39;039&#x2F;&#39;, &#39;038&#x2F;&#39;, &#39;037&#x2F;&#39;, &#39;036&#x2F;&#39;, &#39;035&#x2F;&#39;, &#39;034&#x2F;&#39;, &#39;033&#x2F;&#39;, &#39;032&#x2F;&#39;, &#39;031&#x2F;&#39;, &#39;030&#x2F;&#39;, &#39;029&#x2F;&#39;, &#39;028&#x2F;&#39;, &#39;027&#x2F;&#39;, &#39;026&#x2F;&#39;, &#39;025&#x2F;&#39;, &#39;024&#x2F;&#39;, &#39;023&#x2F;&#39;, &#39;022&#x2F;&#39;, &#39;021&#x2F;&#39;, &#39;020&#x2F;&#39;, &#39;019&#x2F;&#39;, &#39;018&#x2F;&#39;, &#39;017&#x2F;&#39;, &#39;016&#x2F;&#39;, &#39;015&#x2F;&#39;, &#39;014&#x2F;&#39;, &#39;013&#x2F;&#39;, &#39;012&#x2F;&#39;, &#39;011&#x2F;&#39;, &#39;010&#x2F;&#39;, &#39;009&#x2F;&#39;, &#39;008&#x2F;&#39;, &#39;007&#x2F;&#39;, &#39;006&#x2F;&#39;, &#39;005&#x2F;&#39;, &#39;004&#x2F;&#39;, &#39;003&#x2F;&#39;, &#39;002&#x2F;&#39;, &#39;001&#x2F;&#39;]</span><br></pre></td></tr></table></figure>

<p>我们发现又有几个浑水<strong>摸鱼</strong>的url混了进来，不过咱们先把这个放在一边，等会在python里面用字符串操作把它们给筛掉（<del>博主不会一步找到正确url的方法qaq</del>），如果有更好的方法请大神指出（带我带我！）</p>
<p> 使用ctrl+d退出之前的shell，分析章节页面。这次我们需要找到图片的url以及下一页的url</p>
<h3 id="再次分析"><a href="#再次分析" class="headerlink" title="再次分析"></a>再次分析</h3><p><img src="https://raw.githubusercontent.com/MaverickTang/Images/master/%E7%88%AC%E5%8F%96%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%E6%BC%AB%E7%94%BB/Inspect2.png" alt="Inspect"></p>
<p>手动@风车动漫的广告商到我这里来把广告费结一下，【手动狗头】</p>
<p>这次我们找一下下一页的url（这个网站他图片的url放的比较日怪）</p>
<p>在command line里面输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy shell &#39;https:&#x2F;&#x2F;manhua.fzdm.com&#x2F;39&#x2F;&#x2F;126&#x2F;&#39;</span><br></pre></td></tr></table></figure>

<p>然后我们需要再次找到 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;index_0.html&quot; class&#x3D;&quot;pure-button button-success&quot;&gt;第1页&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>然后老套路</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;a[contains(@href, &quot;index&quot;)]&#x2F;@href&#39;).extract()</span><br><span class="line">[&#39;index_0.html&#39;, &#39;index_1.html&#39;, &#39;index_2.html&#39;, &#39;index_3.html&#39;, &#39;index_4.html&#39;, &#39;index_5.html&#39;, &#39;index_6.html&#39;, &#39;index_1.html&#39;]</span><br></pre></td></tr></table></figure>

<p>我们知道最后一个url就是咱们的next page了</p>
<p><strong>但是！！！</strong></p>
<p>我们这么才能知道这一章什么时候结束呢？</p>
<p><img src="https://raw.githubusercontent.com/MaverickTang/Images/master/%E7%88%AC%E5%8F%96%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%E6%BC%AB%E7%94%BB/Inspect3.png" alt="Inspect"></p>
<p>这是我们的最后一页的代码，看起来从url上一点头绪都没有，但是从旁边的文字上我们又有了新的线索，一般它会给出如：下一页这样的信息，最后一页则没有这样的信息，只要我们知道是否有“下一页”，我们就能知道是否为最后一页</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGN2N9.png" alt="Inspect"></p>
<p>所以要获取上面的文字，使用如下方法：</p>
<p>请看第一页与最后一页的对比</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;a[contains(@href, &quot;index&quot;)]&#x2F;text()&#39;).extract()</span><br><span class="line">[&#39;第1页&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;下一页&#39;]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;a[contains(@href, &quot;index&quot;)]&#x2F;text()&#39;).extract()</span><br><span class="line">[&#39;上一页&#39;, &#39;40&#39;, &#39;41&#39;, &#39;42&#39;, &#39;43&#39;, &#39;44&#39;, &#39;第45页&#39;]</span><br></pre></td></tr></table></figure>

<p>然后既然我们已经知道了判断下一页的方法，接下来就是获取图片链接了</p>
<h3 id="获取图片链接"><a href="#获取图片链接" class="headerlink" title="获取图片链接"></a>获取图片链接</h3><p><img src="https://raw.githubusercontent.com/MaverickTang/Images/master/%E7%88%AC%E5%8F%96%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%E6%BC%AB%E7%94%BB/pic.png" alt="Inspect"></p>
<p>再次选择我们找到了图片的url</p>
<p><strong>但是</strong>。。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;img&#x2F;@src&#39;).extract()</span><br><span class="line">[&#39;https:&#x2F;&#x2F;static.fzdm.com&#x2F;css&#x2F;logo.png&#39;, &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;fzdm&#x2F;st@75839ec8feb53ac89fe52134fc648a17bd1bd31f&#x2F;img&#x2F;loading.gif&#39;]</span><br></pre></td></tr></table></figure>

<p>woc居然找不到图片的url？？？</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGNsnU.jpg" alt="Inspect"></p>
<p>于是康康这个蜘蛛获取到的整个html代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.body</span><br><span class="line">b&#39;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;&lt;meta http-equiv&#x3D;&quot;Content-Language&quot; content&#x3D;&quot;utf-8&quot;&gt;&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;Edge,chrome&#x3D;1&quot;&gt;&lt;meta http-equiv&#x3D;&quot;x-dns-prefetch-control&quot; content&#x3D;&quot;on&quot;&gt;&lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;www.fzdm.com&quot;&gt;&lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;manhua.fzdm.com&quot;&gt;&lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;p1.manhuapan.com&quot;&gt;&lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;p2.manhuapan.com&quot;&gt;&lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;p5.manhuapan.com&quot;&gt;&lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;p17.manhuapan.com&quot;&gt;&lt;meta content&#x3D;&quot;all&quot; name&#x3D;&quot;robots&quot;&gt;&lt;title&gt;\xe8\xbf\x9b\xe5\x87\xbb\xe7\x9a\x84\xe5\xb7\xa8\xe4\xba\xba126\xe8\xaf\x9d </span><br><span class="line">……以下省略</span><br></pre></td></tr></table></figure>

<p>我们复制之后打开任意代码编译器然后<code>Command+f</code>寻找这个“2020/02/08055441539556.jpg”url在哪里。</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGN7He.png" alt="Inspect"></p>
<p>我们发现这个url放在javascript里面，使用<code>document.write()</code>。。。</p>
<p>你以为我有什么骚操作？？？</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGUpDS.gif" alt="Inspect"></p>
<p>我还真没有。。。</p>
<p>找到script</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;script&#x2F;text()&#39;).extract()</span><br><span class="line">[&quot;if (&#39;serviceWorker&#39; in navigator) &#123;\n      navigator.serviceWorker.register(&#39;&#x2F;sw.js&#39;, &#123; scope: &#39;&#x2F;&#39; &#125;).then(function (registration) &#123;\n        &#x2F;&#x2F; registration.unregister().then(function(boolean) &#123;\n        &#x2F;&#x2F; if boolean &#x3D; true, unregister is successful\n        &#x2F;&#x2F; &#125;);\n        &#x2F;&#x2F; 注册成功\n        &#x2F;*\n      var serviceWorker;\n      if (registration.installing) &#123;\n        console.log(&#39;installing&#39;);\n      &#125; else if (registration.waiting) &#123;\n        console.log(&#39;waiting&#39;);\n      &#125; else if (registration.active) &#123;\n        console.log(&#39;active&#39;);\n      &#125;\n      *&#x2F;\n        console.log(&#39;ServiceWorker registration successful with scope: &#39;, registration.scope);\n      &#125;).catch(function (err) &#123;\n        &#x2F;&#x2F; 注册失败 :(\n        console.log(&#39;ServiceWorker registration failed: &#39;, err);\n        let refreshing &#x3D; false\n        navigator.serviceWorker.addEventListener(&#39;controllerchange&#39;, () &#x3D;&gt; &#123;\n          if (refreshing) &#123;\n            return\n</span><br><span class="line">……以下省略</span><br></pre></td></tr></table></figure>

<p>于是我们获得了一个很大的array which有我们需要的url</p>
<p>博主是个铁憨憨，强行用python的正则表达式找到了这个url</p>
<p>正则表达式不会的可以走<a href="https://www.runoob.com/python/python-reg-expressions.html" target="_blank" rel="noopener">这里</a></p>
<p>在编程的时候，我们就先记录下这些script，然后再继续操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pre_img_url = response.xpath(<span class="string">'//script/text()'</span>).extract()<span class="comment">#记录script</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(pre_img_url)):<span class="comment">#记录的时候是以array存储的</span></span><br><span class="line">			matchObj = re.search( <span class="string">r'url=\"()\s*(.*)jpg'</span>, pre_img_url[i], re.M|re.I)<span class="comment">#正则表达式寻找</span></span><br><span class="line">			<span class="keyword">if</span> matchObj:</span><br><span class="line">				ppreimgurl = matchObj.group()<span class="comment">#里面就包含了我们要找的url（本例是“2020/02/08055441539556.jpg”）</span></span><br><span class="line">				img_url= <span class="string">'http://p2.manhuapan.com/'</span> + ppreimgurl[<span class="number">5</span>:len(ppreimgurl)]<span class="comment">#在前面加上存储图片的网址</span></span><br></pre></td></tr></table></figure>

<h2 id="五、开始编写"><a href="#五、开始编写" class="headerlink" title="五、开始编写"></a>五、开始编写</h2><p>还记得我们最开始的<code>parse()</code>吗？我们现在给他添加一点东西</p>
<p>解释都在代码里面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">		link_urls = response.xpath(<span class="string">'//li/a[1]/@href'</span>).extract()<span class="comment">#找到各话的url</span></span><br><span class="line">		names = response.xpath(<span class="string">'//li/a[1]/@title'</span>).extract()<span class="comment">#找到各话的名字，方便命名文件夹</span></span><br><span class="line">    <span class="comment"># 下面的variable可以不管</span></span><br><span class="line">		x=<span class="number">-1</span></span><br><span class="line">		h=<span class="number">0</span></span><br><span class="line">		comics_url_list = []</span><br><span class="line">		rnames = []</span><br><span class="line">		base = <span class="string">'https://manhua.fzdm.com/132/'</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(len(link_urls)):</span><br><span class="line">			h=bool(re.search(<span class="string">r'\d'</span>, link_urls[i]))</span><br><span class="line">			<span class="keyword">if</span>(h==<span class="literal">True</span>):</span><br><span class="line">				x=x+<span class="number">1</span></span><br><span class="line">				name=names[x]</span><br><span class="line">				url=base + link_urls[i]<span class="comment">#它的url只有base后面的部分，所以要把base加上</span></span><br><span class="line">				rnames.append(name)<span class="comment">#将各话的名字加入一个新的array</span></span><br><span class="line">				comics_url_list.append(url)<span class="comment">#将url加入array</span></span><br><span class="line"><span class="comment">#				print("%s :https://www.manhuadui.com %s"%(names[4+x],link_urls[i]))</span></span><br><span class="line"><span class="comment">#				print("%s : %s"%(rnames[x],comics_url_list[x]))	</span></span><br><span class="line">				</span><br><span class="line">		print(<span class="string">'\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; current page comics list &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;'</span>)</span><br><span class="line">		print(comics_url_list)</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> url <span class="keyword">in</span> comics_url_list:</span><br><span class="line">			<span class="keyword">yield</span> scrapy.Request(url=url, callback=self.comics_parse, dont_filter=<span class="literal">True</span>)<span class="comment">#通过特殊的scrapy传递将url传到下一个函数对下一层网页进行爬取</span></span><br><span class="line">      <span class="comment">#一定要加入dont_filter=True，不然会出bug（不进入下个函数）</span></span><br><span class="line">			print(<span class="string">'&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  parse comics:'</span> + url)</span><br></pre></td></tr></table></figure>

<p>接下来我们编写<code>comics_parse(self, response)</code>函数来处理各话的url</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">comics_parse</span><span class="params">(self, response)</span>:</span><span class="comment">#另一个函数爬取下层页面</span></span><br><span class="line">		pre_img_url = response.xpath(<span class="string">'//script/text()'</span>).extract()<span class="comment">#获取script</span></span><br><span class="line">		img_url = <span class="string">''</span></span><br><span class="line">		ptitle=response.xpath(<span class="string">'//title/text()'</span>).extract()<span class="comment">#获取章节名称</span></span><br><span class="line">		prepage_num=response.xpath(<span class="string">'//a[contains(@href, "index")]/text()'</span>).extract()<span class="comment">#获取页面名字</span></span><br><span class="line">		page_num=<span class="string">''</span></span><br><span class="line">		a=<span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(prepage_num)):<span class="comment">#寻找page number来作为文件名</span></span><br><span class="line">			<span class="keyword">for</span> _char <span class="keyword">in</span> prepage_num[j]:<span class="comment">#判断中文字符来找到当前页码（它会是“第n页”）</span></span><br><span class="line">				<span class="keyword">if</span> <span class="string">'\u4e00'</span> &lt;= _char &lt;= <span class="string">'\u9fa5'</span>:</span><br><span class="line">					page_num=prepage_num[j]</span><br><span class="line">					<span class="keyword">if</span> page_num == <span class="string">'下一页'</span>:<span class="comment">#如果是‘下一页’叫表示它漏过了‘第一页’</span></span><br><span class="line">						page_num=<span class="string">'第1页'</span></span><br><span class="line">					a=<span class="number">1</span></span><br><span class="line">					<span class="keyword">break</span></span><br><span class="line">			<span class="keyword">if</span>(a==<span class="number">1</span>):</span><br><span class="line">				<span class="keyword">break</span>	 </span><br><span class="line">		t=ptitle[<span class="number">0</span>]</span><br><span class="line">		index=ptitle[<span class="number">0</span>].find(<span class="string">'话'</span>)<span class="comment">#通过找到‘话’来找到章节的名字</span></span><br><span class="line">		title=t[<span class="number">0</span>:(index+<span class="number">1</span>)]<span class="comment">#截取章节名字</span></span><br><span class="line"><span class="comment">#		matchObj = re.search( r'url=\"()\s*(.*)jpg', line, re.M|re.I)</span></span><br><span class="line"> 	 <span class="keyword">for</span> i <span class="keyword">in</span> range(len(pre_img_url)):<span class="comment">#记录的时候是以array存储的      </span></span><br><span class="line">   		matchObj = re.search( <span class="string">r'url=\"()\s*(.*)jpg'</span>, pre_img_url[i], re.M|re.I)<span class="comment">#正则表达式寻找      </span></span><br><span class="line">    	<span class="keyword">if</span> matchObj:        </span><br><span class="line">      	ppreimgurl = matchObj.group()<span class="comment">#里面就包含了我们要找的url（本例是“2020/02/08055441539556.jpg”）        img_url= 'http://p2.manhuapan.com/' + ppreimgurl[5:len(ppreimgurl)]#在前面加上存储图片的网址</span></span><br><span class="line">				self.log(<span class="string">'&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;开始下载&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;'</span>)</span><br><span class="line"><span class="comment">#				self.save_img(page_num[len(page_num)], title, img_url)</span></span><br><span class="line">				document = <span class="string">'/Users/maverick/Desktop/test/One punch'</span></span><br><span class="line">				comics_path = document + <span class="string">'/'</span> + title</span><br><span class="line">				exists = os.path.exists(comics_path)</span><br><span class="line">				<span class="keyword">if</span> <span class="keyword">not</span> exists:<span class="comment">#如果没有创建过文件夹</span></span><br><span class="line"><span class="comment">#					self.log('create document: ' + title)</span></span><br><span class="line">					os.makedirs(comics_path)</span><br><span class="line">				pic_name = comics_path + <span class="string">'/'</span> + page_num + <span class="string">'.jpg'</span></span><br><span class="line">				exists = os.path.exists(pic_name)</span><br><span class="line">				<span class="keyword">if</span> <span class="keyword">not</span> exists:</span><br><span class="line">					time.sleep(<span class="number">0.1</span>)<span class="comment">#延时防止锁ip</span></span><br><span class="line">					urlretrieve(img_url, pic_name)<span class="comment">#下载图片</span></span><br><span class="line">				<span class="keyword">break</span>		</span><br><span class="line">		pages_urls = response.xpath(<span class="string">'//a[contains(@href, "index")]/@href'</span>).extract()<span class="comment">#找到下一页的url</span></span><br><span class="line">		page_situation = response.xpath(<span class="string">'//a[contains(@href, "index")]/text()'</span>).extract()<span class="comment">#与是否为最后一页有关</span></span><br><span class="line">		ans=<span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> _char <span class="keyword">in</span> page_situation[len(page_situation)<span class="number">-1</span>]:<span class="comment">#还是通过中文来判断是否为最后一页</span></span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> <span class="string">'\u4e00'</span> &lt;= _char &lt;= <span class="string">'\u9fa5'</span>:</span><br><span class="line">				ans=<span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span>(ans==<span class="number">0</span>):</span><br><span class="line">			premyfront = response.request.url<span class="comment">#找到当前页面的url，再通过字符串操作得到基础页</span></span><br><span class="line">			fenge = premyfront.split(<span class="string">'/'</span>)</span><br><span class="line">			myfont=<span class="string">''</span></span><br><span class="line">			<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">				myfont=myfont+fenge[i]+<span class="string">'/'</span></span><br><span class="line">			next_page = myfont+pages_urls[len(pages_urls)<span class="number">-1</span>]<span class="comment">#得到下一页</span></span><br><span class="line">			self.log(next_page)</span><br><span class="line">			<span class="keyword">yield</span> scrapy.Request(next_page, callback=self.comics_parse, dont_filter=<span class="literal">True</span>)	<span class="comment">#递归自己</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			self.log(<span class="string">'parse comics:'</span> + title + <span class="string">'finished.'</span>)</span><br></pre></td></tr></table></figure>

<p>然后我们就可以欣赏它爬取的漫画了。因为整个网站的机制是一样的，所以我们只需要修改url地址，就可以任意爬取自己想看的漫画了。</p>
<h2 id="五、后记"><a href="#五、后记" class="headerlink" title="五、后记"></a>五、后记</h2><p>如果是自己想用的话，代码已经在<a href="https://github.com/MaverickTang/Attack-on-titan-download" target="_blank" rel="noopener">GitHub</a>上面了，下载下来就可以直接用。</p>
<p>不仅是巨人，这个爬虫还可以爬取整个网站上的其他漫画，比如：</p>
<p>一拳超人，火影忍者，海贼王,鬼灭之刃等。</p>
<p>请求星星✨</p>
<p>使用terminalcd到根目录然后运行以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl titan</span><br></pre></td></tr></table></figure>

<p>记得把保存的本机地址还有想爬取的漫画地址改一下</p>
<p>当然只要编程的速度够快，这种下载速度绝对比某网盘快得多，最关键的是方便并且可以装B。。。</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGNvgP.gif" alt="Inspect"></p>
<p>放上自己爬到的兵长帅照哈哈哈哈哈</p>
<p><img src="https://s1.ax1x.com/2020/04/02/GGNX9I.jpg" alt="Inspect"></p>
<h2 id="六、参考链接及版权说明"><a href="#六、参考链接及版权说明" class="headerlink" title="六、参考链接及版权说明"></a>六、参考链接及版权说明</h2><p>博主是第一次写博客，如果侵权请联系我删除，还有对两个大佬写的博客表示诚挚感谢，链接第一与第二个为两个大佬的博客。</p>
<p>参考链接：</p>
<p>1(合法).<a href="https://blog.csdn.net/c406495762/article/details/72858983" target="_blank" rel="noopener">https://blog.csdn.net/c406495762/article/details/72858983</a></p>
<p>2(非法).<a href="https://moshuqi.github.io/2016/09/27/Python爬虫-Scrapy框架/" target="_blank" rel="noopener">https://moshuqi.github.io/2016/09/27/Python%E7%88%AC%E8%99%AB-Scrapy%E6%A1%86%E6%9E%B6/</a></p>
<p>3(正则表达式).<a href="https://www.runoob.com/python/python-reg-expressions.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-reg-expressions.html</a></p>
<p>4(xpath与css学习).<a href="https://www.jianshu.com/p/489c5d21cdc7" target="_blank" rel="noopener">https://www.jianshu.com/p/489c5d21cdc7</a></p>
<p>5(下载图片方法).<a href="https://morvanzhou.github.io/tutorials/data-manipulation/scraping/3-02-download/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/data-manipulation/scraping/3-02-download/</a></p>
<p>6(进击的巨人在线观看).<a href="https://manhua.fzdm.com/39/" target="_blank" rel="noopener">https://manhua.fzdm.com/39/</a></p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
